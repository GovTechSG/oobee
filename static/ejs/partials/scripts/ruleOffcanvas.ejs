<%# functions used to populate content in the rule offcanvas that appears when an item in the
category summary is clicked %>

<script>
  function generateWcagConformanceLinks(conformanceList) {
    const wcagConformanceUrls = {
      wcag111: 'https://www.w3.org/TR/WCAG21/#non-text-content',
      wcag122: 'https://www.w3.org/TR/WCAG21/#captions-prerecorded',
      wcag131: 'https://www.w3.org/TR/WCAG21/#info-and-relationships',
      wcag135: 'https://www.w3.org/TR/WCAG21/#identify-input-purpose',
      wcag141: 'https://www.w3.org/TR/WCAG21/#use-of-color',
      wcag142: 'https://www.w3.org/TR/WCAG21/#audio-control',
      wcag143: 'https://www.w3.org/TR/WCAG21/#contrast-minimum',
      wcag144: 'https://www.w3.org/TR/WCAG21/#resize-text',
      wcag1412: 'https://www.w3.org/TR/WCAG21/#text-spacing',
      wcag211: 'https://www.w3.org/TR/WCAG21/#keyboard',
      wcag221: 'https://www.w3.org/TR/WCAG21/#timing-adjustable',
      wcag222: 'https://www.w3.org/TR/WCAG21/#pause-stop-hide',
      wcag241: 'https://www.w3.org/TR/WCAG21/#bypass-blocks',
      wcag242: 'https://www.w3.org/TR/WCAG21/#page-titled',
      wcag244: 'https://www.w3.org/TR/WCAG21/#link-purpose-in-context',
      wcag311: 'https://www.w3.org/TR/WCAG21/#language-of-page',
      wcag312: 'https://www.w3.org/TR/WCAG21/#language-of-parts',
      wcag332: 'https://www.w3.org/TR/WCAG21/#labels-or-instructions',
      wcag411: 'https://www.w3.org/TR/WCAG21/#parsing',
      wcag412: 'https://www.w3.org/TR/WCAG21/#name-role-value',
    };

    const links = [];
    for (let i = 1; i < conformanceList.length; i++) {
      const [wcagSection, subSection, ...sectionItem] = conformanceList[i].slice(4); // slice to get rid of 'wcag';
      const formattedConformanceNumber = `${wcagSection}.${subSection}.${sectionItem.join('')}`;
      links.push(
        `<a href="${
          wcagConformanceUrls[conformanceList[i]]
        }" target="_blank">WCAG ${formattedConformanceNumber}</a>`,
      );
    }
    return links.join('&nbsp&nbsp,&nbsp&nbsp&nbsp');
  }

  function expandRule(selectedCategory, selectedRule) {
    const conformanceLevels = {
      wcag2a: 'Level A',
      wcag2aa: 'Level AA',
      wcag21aa: 'Level AA',
      'best-practice': 'Best practice',
    };

    document.getElementById('expandedRuleName').innerHTML = htmlEscapeString(
      selectedRule.description,
    );
    document.getElementById('expandedRuleDescription').innerHTML = whyItMatters[selectedRule.rule];
    document.getElementById('expandedRuleHelpUrl').href = selectedRule.helpUrl;
    document.getElementById('expandedRuleConformance').replaceChildren(
      createElementFromString(`
      <div class="d-flex align-items-center">
        <div aria-label="${
          conformanceLevels[selectedRule.conformance[0]]
        }" class="conformance-bubble ${selectedRule.conformance[0]}"></div>
        ${
          selectedRule.conformance[0] === 'best-practice'
            ? `<span>Best practice</span>`
            : generateWcagConformanceLinks(selectedRule.conformance)
        }
      </div>
    `),
    );

    const availableFixCategories = [];
    const categorySelectors = [];

    const selectedCategorySelectorSwitcher = (function () {
      let selected;
      const changeSelected = curCategorySelector => {
        if (selected) {
          selected.classList.remove('selected');
        }
        curCategorySelector.classList.add('selected');
        selected = curCategorySelector;
      };
      return changeSelected;
    })();

    Object.keys(scanItems).forEach(category => {
      const ruleInCategory = scanItems[category].rules.find(r => r.rule === selectedRule.rule);

      if (ruleInCategory !== undefined) {
        if (category !== 'passed') {
          availableFixCategories.push(category);
        }
        const element = createElementFromString(`
          <button class="category-selector ${category}">
            <h4 class="d-flex align-items-center category-name">${getFormattedCategoryTitle(
              category,
            )}</h4>
            <span>${ruleInCategory.totalItems} occurrences</span>
          </button>
        `);
        element.addEventListener('click', event => {
          selectedCategorySelectorSwitcher(event.currentTarget);
          const ruleInfoText = document.getElementById('expandedRuleInfoText');
          if (category === 'mustFix' && availableFixCategories.includes('goodToFix')) {
            ruleInfoText.innerHTML =
              '<p class="mb-4">There are also occurrences of this issue that falls under "Good to Fix”.</p>';
          } else if (category === 'goodToFix' && availableFixCategories.includes('mustFix')) {
            ruleInfoText.innerHTML =
              '<p class="mb-4">There are also occurrences of this issue that falls under "Must Fix”.</p>';
          } else if (category === 'passed') {
            ruleInfoText.innerHTML = `<p class="mb-4">There are also occurrences of this issue that falls under ${availableFixCategories
              .map(c => `"${getFormattedCategoryTitle(c)}"`)
              .join(' and ')}.</p>`;
          } else {
            ruleInfoText.innerHTML = '';
          }

          buildExpandedRuleCategoryContent(category, ruleInCategory);
        });
        if (category === selectedCategory) {
          element.click();
        }
        categorySelectors.push(element);
      }
    });

    document.getElementById('expandedRuleCategorySelectors').replaceChildren(...categorySelectors);
  }

  function buildExpandedRuleCategoryContent(category, ruleInCategory) {
    const contentContainer = document.getElementById('expandedRuleCategoryContent');

    if (category === 'passed') {
      contentContainer.innerHTML = `You may find the list of passed HTML elements in <a href='#' target='_blank'>passed.html</a>.`;
      return;
    }

    const contentTitle = createElementFromString(`
      <h5 class="mb-4">
        Pages with this issue (${ruleInCategory.pagesAffected.length})
      </h5>`);

    const accordions = ruleInCategory.pagesAffected.map((page, index) => {
      const accordionId = `${ruleInCategory.rule}-${category}-page-${index}`;
      const accordion = createElementFromString(`
        <div class="accordion mt-2 ${category}">
          <div class="accordion-item">
            <div class="accordion-header" id="${accordionId}-title">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${accordionId}-content" aria-expanded="false" aria-controls="${accordionId}-content">
                <div class="me-3">${page.pageTitle}</div>
                <div class="ms-auto counter">${page.items.length}</div>
              </button>
            </div>
            <div id="${accordionId}-content" class="accordion-collapse collapse" aria-labelledby="${accordionId}-title">
              <div class="accordion-body p-3">
                <a href="${page.url}" target="_blank">${page.url}</a>
                <div class="page-accordion-content-title">
                  <span>${getFormattedCategoryTitle(category)} elements</span>
                  <span class="page-items-count">${page.items.length}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      `);

      const accordionBody = accordion.getElementsByClassName('accordion-body')[0];

      page.items.forEach(item => {
        const itemCard = createElementFromString(`
          <div class="card mt-3">
            ${
              item.needsReview
                ? `<div class="needsReview">This occurrence might be a false positive that needs to be verified by a human.</div>`
                : ``
            }
            <div class="p-3">
              <div class="d-flex justify-content-between">
                <div class="fw-bold">HTML element</div>
                <pre class="page-item-card-section-content"><code class="language-html">${htmlEscapeString(
                  item.html,
                )}</code></pre>
              </div>
              <hr />
              <div class="d-flex justify-content-between">
                <div class="fw-bold">${item.needsReview ? 'Details' : 'How to fix'}</div>
                <div class="page-item-card-section-content">
                  ${generateItemMessageElement(item.needsReview, item.message)}
                </div>
              </div>
            </div>
          </div>
        `);

        accordionBody.appendChild(itemCard);
      });

      return accordion;
    });
    contentContainer.replaceChildren(contentTitle, ...accordions);
    hljs.highlightAll();
  }

  function generateItemMessageElement(needsReview, rawMessage) {
    const htmlEscapedMessageArray = rawMessage.split('\n  ').map(m => htmlEscapeString(m));

    if (needsReview) {
      if (htmlEscapedMessageArray.length === 1) {
        return `<p class="mb-0">${htmlEscapedMessageArray[0]}</p>`;
      } else {
        return `<ul>${htmlEscapedMessageArray.map(m => `<li>${m}</li>`).join('')}</ul>`;
      }
    } else {
      let i = 0;
      const elements = [];

      while (i < htmlEscapedMessageArray.length) {
        if (htmlEscapedMessageArray[i].startsWith('Fix ')) {
          elements.push(`<p class="mb-0">${htmlEscapedMessageArray[i]}</p>`);
          i++;
        } else {
          const fixesList = [];
          while (
            i < htmlEscapedMessageArray.length &&
            !htmlEscapedMessageArray[i].startsWith('Fix a')
          ) {
            fixesList.push(`<li>${htmlEscapedMessageArray[i]}</li>`);
            i++;
          }
          elements.push(`<ul>${fixesList.join('')}</ul>`);
        }
      }

      return elements.join('');
    }
  }

  const whyItMatters = {
    accesskeys:
      '<p>\n  Specifying a <code>accesskey</code> attribute value for some part of a\n  document allows users to quickly activate or move the focus to a specific\n  element by pressing the specified key (usually in combination with the\n  <code><kbd>alt</kbd></code> key). Duplicating <code>accesskey</code> values\n  creates unexpected effects that ultimately make the page less accessible.\n</p>\n<p>\n  For each defined <code>accesskey</code>, ensure the value is unique and does\n  not conflict with any default browser and screen reader shortcut keys.\n</p>\n<p>\n  Content is not operable by keyboard users with no or low vision who cannot use\n  devices such as mice that require eye-hand coordination, users who have\n  trouble tracking a pointer, or users who must use alternate keyboards or input\n  devices acting as keyboard emulators.\n</p>',
    'area-alt':
      '<p>\n  Screen readers have no way of translating images into words. It is important\n  that all images, including image maps, have <code>alt</code> text values.\n</p>\n\n<p>\n  Screen readers typically announce the filename of the image if alternative\n  text is missing. Filenames do not adequately describe images and are not\n  helpful to screen reader users.\n</p>',
    'aria-allowed-attr':
      '<p>\n  Using ARIA attributes in roles where they are not allowed can interfere with\n  the accessibility of the web page. Using an invalid role-attribute combination\n  will, at best, result in no effect on the accessibility of the application\n  and, at worst, may trigger behavior that disables accessibility for entire\n  portions of an application.\n</p>\n<p>\n  When ARIA attributes are used on HTML elements that are not in accordance with\n  WAI-ARIA 1.1, they conflict with the semantics of the elements which can cause\n  assistive technology products report nonsensical user interface (UI)\n  information that does not represent the actual UI of the document.\n</p>',
    'aria-command-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="link"</code>, <code>role="button"</code>, or\n  <code>role="menuitem"</code> that do not have an accessible name.\n</p>',
    'aria-dialog-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="dialog"</code> or <code>role="alertdialog"</code> that do not have\n  an accessible name.\n</p>',
    'aria-hidden-focus':
      '<p>\n  Using the <code>aria-hidden="true"</code> attribute on an element removes the\n  element and ALL of its child nodes from the accessibility API making it\n  completely inaccessible to screen readers and other assistive technologies.\n  Aria-hidden may be used with extreme caution to hide visibly rendered content\n  from assistive technologies only if the act of hiding this content is intended\n  to improve the experience for users of assistive technologies by removing\n  redundant or extraneous content. If aria-hidden is used to hide visible\n  content from screen readers, the identical or equivalent meaning and\n  functionality must be exposed to assistive technologies.\n</p>\n\n<p>\n  <strong>Note:</strong> Using <code>aria-hidden="false"</code> on content that\n  is a descendent of an element that is hidden using\n  <code>aria-hidden="true"</code> will NOT expose that content to the\n  accessibility API and it will not be accessible to screen readers or other\n  assistive technologies.\n</p>\n\n<p>\n  The rule applies to any element with an\n  <code>aria-hidden="true"</code> attribute.\n</p>\n\n<p>\n  By adding <code>aria-hidden="true"</code> to an element, content authors\n  ensure that assistive technologies will ignore the element. This can be used\n  to hide decorative parts of a web page, such as icon fonts - that are not\n  meant to be read by assistive technologies.\n</p>\n\n<p>\n  A focusable element with <code>aria-hidden="true"</code> is ignored as part of\n  the reading order, but still part of the focus order, making it’s state of\n  visible or hidden unclear.\n</p>\n\n<ul>\n  <li>\n    <p>\n      <a href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html">https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html</a>\n    </p>\n  </li>\n  <li>\n    <p>\n      <a href="https://www.w3.org/TR/wai-aria-1.1/#aria-hidden">https://www.w3.org/TR/wai-aria-1.1/#aria-hidden</a>\n    </p>\n  </li>\n  <li>\n    <p>\n      <a href="https://www.w3.org/TR/html/editing.html#can-be-focused">https://www.w3.org/TR/html/editing.html#can-be-focused</a>\n    </p>\n  </li>\n</ul>',
    'aria-input-field-name':
      '<p>\n  This new rule ensures every ARIA input field has an accessible name.\n  Accessible names must exist for the following input field roles:\n</p>\n<ul>\n  <li>combobox</li>\n  <li>listbox</li>\n  <li>searchbox</li>\n  <li>slider</li>\n  <li>spinbutton</li>\n  <li>textbox</li>\n</ul>',
    'aria-meter-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="meter"</code> that do not have an accessible name.\n</p>',
    'aria-progressbar-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="progressbar"</code> that do not have an accessible name.\n</p>',
    'aria-required-children':
      '<p>\n  For each role, WAI-ARIA explicitly defines which child and parent roles are\n  allowable and/or required. ARIA <code>role</code>s missing required child\n  <code>role</code>s will not be able to perform the accessibility functions\n  intended by the developer.\n</p>\n<p>\n  Assistive technology needs to convey the context to the user. For example, in\n  a <code>treeitem</code>, it is important to know the parent (container), item,\n  or siblings in the folder. This can be done in two ways:\n</p>\n<ol>\n  <li>\n    <strong>Code order or DOM:</strong> The necessary context is often clear\n    from the code order or DOM.\n  </li>\n  <li>\n    <strong>ARIA:</strong> ARIA (such as <code>aria-owns</code>) can be used\n    provide the relationships when the hierarchy is not the same as the code\n    structure or DOM tree.\n  </li>\n</ol>',
    'aria-required-parent':
      '<p>\n  For each role, WAI-ARIA explicitly defines which child and parent roles are\n  allowable and/or required. Elements containing ARIA <code>role</code> values\n  missing required parent element <code>role</code> values will not enable\n  assistive technology to function as intended by the developer.\n</p>\n<p>\n  When it is necessary to convey context to the user of assistive technology in\n  the form of hierarchy (for example, the importance of a parent container, item\n  or sibling in a folder tree), and the hierarchy is not the same as the code\n  structure or DOM tree, there is no way to provide the relationship information\n  without the use of ARIA role parent elements.\n</p>',
    'aria-roledescription':
      "<p>\n  Inappropriate <code>aria-roledescription</code> attribute values that conflict\n  with an element's implied or explicit <code>role</code> value can interfere\n  with the accessibility of the web page. A conflicting\n  <code>aria-roledescription</code> attribute value may result in no effect on\n  the accessibility of the application and may trigger behavior that disables\n  accessibility for entire portions of an application.\n</p>\n<p>\n  When <code>aria-roledescription</code>&gt; attributes are applied to HTML\n  elements not in accordance with WAI-ARIA 1.1, semantics conflict between the\n  <code>aria-roledescription</code> value and the implicit or explicit element\n  <code>role</code> value which may result in assistive technology products\n  reporting nonsensical user interface (UI) information that does not correctly\n  represent the intended UI experience.\n</p>",
    'aria-text':
      '<p>\n  When a text node is split by markup (e.g.\n  <code>&lt;h1&gt;Hello &lt;span&gt;World&lt;/span&gt;&lt;/h1&gt;</code>)\n  VoiceOver will treat it as two separate phrases instead of just one. Adding\n  <code>role="text"</code> around the elements solves the problem. However, it\n  also overrides the role of the element and all descendants and treats them all\n  as text nodes. If one of the descendant elements is also focusable it would\n  create an empty tab stop. That is, you could tab to the element but VoiceOver\n  would not announce its name, role, or value.\n</p>',
    'aria-toggle-field-name':
      '<p>\n  Ensures every element with a semantic role also has an accessible name.\n  Semantic roles include:\n</p>\n<ul>\n  <li>checkbox</li>\n  <li>menu</li>\n  <li>menuitemcheckbox</li>\n  <li>menuitemradio</li>\n  <li>radio</li>\n  <li>radiogroup</li>\n  <li>switch</li>\n</ul>',
    'aria-tooltip-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="tooltip"</code> that do not have an accessible name.\n</p>',
    'aria-treeitem-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="treeitem"</code> that do not have an accessible name.\n</p>',
    'aria-valid-attr-value':
      '<p>\n  ARIA attributes (i.e. starting with <code>aria-</code>) must contain valid\n  values. These values must be spelled correctly and correspond to values that\n  make sense for a particular attribute to perform the intended accessibility\n  function.\n</p>\n\n<p>\n  Many ARIA attributes accept a specific set of values. Allowed values,\n  acceptable "undefined" values, and acceptable "default" values are required.\n  Failure to comply with allowed values results in content that is not\n  accessible to assistive technology users.\n</p>',
    'aria-valid-attr':
      '<p>\n  If the developer uses a non-existent or misspelled ARIA attribute, the\n  attribute will not be able to perform the accessibility function intended by\n  the developer.\n</p>\n<p>\n  In order to allow assistive technologies to convey appropriate information to\n  persons with disabilities, user interface elements intended to improve the\n  accessibility and interoperability of web and application content must conform\n  to properly spelled and current ARIA attributes.\n</p>\n<p>\n  When developers do not use attributes defined in the WAI-ARIA 1.1 W3C\n  Recommendation, they do not properly convey user interface behaviors and\n  structural information to assistive technologies in document-level markup.\n</p>',
    'autocomplete-valid':
      '<p>\n  Failure to provide autocomplete values in form fields results in inaccessible\n  content. Screen readers do not read identified autocomplete form fields if the\n  appropriate autocomplete attribute values are missing. Users cannot correctly\n  navigate forms when screen readers cannot provide adequate information to the\n  user regarding form field interaction requirements.\n</p>',
    'avoid-inline-spacing':
      '<p>\n  Many people with cognitive disabilities have trouble tracking lines of text\n  when a block of text is single spaced. Providing spacing between 1.5 to 2\n  allows them to start a new line more easily once they have finished the\n  previous one.\n</p>',
    blink:
      '<p>\n  As the name suggests, <code>blink</code> tags cause content to flash. Though\n  you may like the effect, blinking text can be difficult to read, and blinking\n  objects (links, buttons, etc.) can be difficult to activate, especially for\n  users with imprecise or limited dexterity.\n</p>\n<p>\n  It can be very difficult for people with visual and cognitive disabilities to\n  see and understand text that blinks. Blinking text be distracting, especially\n  for users with cognitive disabilities. It can also be difficult for some\n  individuals to comprehend. For these reasons, the <code>blink</code> element\n  should never be used.\n</p>',
    'definition-list':
      '<p>\n  Screen readers have a specific way of announcing definition lists. When such\n  lists are not properly marked up, this creates the opportunity for confusing\n  or inaccurate screen reader output.\n</p>\n<p>\n  A definition list is used to provide the definitions of words or phrases. The\n  Definition List is marked up using the <code>dl</code> element. Within the\n  list, each term is put in a separate <code>dt</code> element, and its\n  definition goes in the <code>dd</code> element directly following it.\n</p>',
    dlitem:
      "<p>\n  A definition list item must be wrapped in parent <code>dl</code> elements,\n  otherwise it will be invalid.\n</p>\n<p>\n  A definition list must follow a specific hierarchy. A list is defined using\n  the <code>dl</code> element. What follows are alternating sets of\n  <code>dt</code> and <code>dd</code> elements, starting with the\n  <code>dt</code> element. <code>dt</code> elements define a term while\n  <code>dd</code> elements denote a term's description. Each set of\n  <code>dt</code> elements must have a corresponding set of\n  <code>dd</code> elements. Only <code>dt</code> and <code>dd</code> elements\n  are allowed in definition list. If this hierarchy is not followed, the list\n  will be invalid.\n</p>",
    'duplicate-id-active':
      '<p>\n  The ID attribute uniquely identifies focusable elements on a page. It does not\n  make sense to duplicate an active ID.\n</p>\n\n<p>\n  Duplicate active ID values break the accessibility of focusable elements\n  including labels for forms, table header cells, etc., Screen readers and\n  client-side scripts will skip any duplication other than the first instance.\n  Validating HTML files help prevent and eliminate possible sources of\n  accessibility problems, when not breaking accessibility.\n</p>\n\n<p>\n  Those experienced with client-side scripting know that when you re-use an\n  active ID, typically the only one that gets acted upon by the scripting is the\n  first instance of the use of that active ID. Similarly, assistive technologies\n  may, when referencing an active ID, only reference the first one accurately.\n</p>',
    'empty-table-header':
      '<p>\n  Table header elements should have visible text that describes the purpose of\n  the row or column to both sighted users and screen reader users.\n</p>',
    'frame-focusable-content':
      '<p>\n  When a frame has a negative tabindex, the browser is prevented from\n  redirecting the focus to the content inside that frame. This causes all its\n  content from getting skipped in keyboard navigation, and if the frame is\n  scrollable also prevents the focus from reaching any element from which the\n  frame can be scrolled with the keyboard.\n</p>',
    'frame-tested':
      '<p>\n  Without the axe-core script, it is not possible for the tool to perform\n  violation checking on multiple levels of nested iframes.\n</p>',
    'frame-title-unique':
      '<p>\n  Screen reader users rely on a frame title to describe the contents of the\n  <code>frame</code>. Navigating through frames and iframes can quickly become\n  difficult and confusing for users of this technology if the frames are not\n  marked with a <code>title</code> attribute.\n</p>\n\n<p>\n  Screen reader users have the option to pull up a list of titles for all frames\n  on a page. Adding descriptive, unique titles allows users to quickly find the\n  frame they need. If no titles are present, navigating through frames can\n  quickly become difficult and confusing. If no title is listed, screen readers\n  will instead give information like “frame,” “javascript,” the filename, or the\n  URL. In most cases, this information won’t be very helpful.\n</p>',
    'frame-title':
      '<p>\n  Screen reader users rely on a frame title to describe the contents of the\n  <code>frame</code>. Navigating through <code>frame</code> and\n  <code>iframe</code> elements quickly becomes difficult and confusing for users\n  of this technology if the markup does not contain a\n  <code>title</code> attribute.\n</p>\n\n<p>\n  Screen reader users have the option to pull up a list of titles for all frames\n  on a page. Adding descriptive, unique titles allows users to quickly find the\n  frame they need. If no titles are present, navigating through frames can\n  quickly become difficult and confusing. If no title is listed, screen readers\n  will instead give information like “frame,” “JavaScript,” the filename, or the\n  URL. In most cases, this information won’t be very helpful.\n</p>',
    'html-xml-lang-mismatch':
      "<p>\n  When configuring a screen reader, users select a default language. If the\n  language of a webpage is not specified, the screen reader assumes the default\n  language set by the user. Multiple languages are an issue for users who speak\n  and access websites in multiple languages. It is essential to specify a\n  default language and ensure that it is valid for screen readers to function\n  correctly.\n</p>\n<p>\n  Screen readers use different sound libraries for each language, based on the\n  pronunciation and characteristics of that language. Screen readers can switch\n  between language libraries easily, but only if documents specify which\n  language(s) should to read. If the language is not specified, screen readers\n  read documents in the user's default language, resulting in garbled language.\n  It can be challenging to understand anything when screen readers are using the\n  wrong language library.\n</p>",
    'image-alt':
      "<p>\n  Screen readers have no way of translating an image into words that gets read\n  to the user, even if the image only consists of text. As a result, it's\n  necessary for images to have short, descriptive <code>alt</code> text so\n  screen reader users clearly understand the image's contents and purpose.\n</p>\n<p>\n  If you can't see, all types of visual information, such as images, are\n  completely useless unless a digital text alternative is provided so that\n  screen readers can convert that text into either sound or braille. The same is\n  true in varying degrees for people with low vision or color-blindness.\n</p>",
    'image-redundant-alt':
      '<p>\n  It is unnecessary and potentially confusing to have alternative text for a\n  link or image to be repeated in text adjacent to the link or image since it\n  would be read twice by a screen reader.\n</p>\n\n<p>\n  Since image buttons use alt attributes for labels, the labels must not\n  duplicate the text next to the button. Duplicated alternative text for an\n  image or link in the text adjacent to that image or link results in screen\n  readers announcing the text to the user twice.\n</p>',
    'input-button-name':
      '<p>\n  Screen reader users are not able to discern the purpose of an\n  <code>input type="button"</code> without an accessible name.\n</p>\n<p>\n  Screen reader users cannot understand the purpose of an image without a\n  discernable and accessible textual name. A title for an image may provide only\n  advisory information about the image itself. Unnamed actionable graphic images\n  such as buttons have no clear description of the destination, purpose,\n  function or action for the non-text content when it is intended to be used as\n  a control.\n</p>',
    'input-image-alt':
      '<p>\n  An <code>&lt;input type="image"&gt;</code> button must have\n  alternate text, otherwise screen reader users will not know the button\'s\n  purpose. Even if the image contains only text, it still requires alternate\n  text, since a screen reader cannot translate images of words into output.\n</p>\n\n<p>\n  <strong>Text Alone Is Not A Label</strong>: Just typing text next to the form\n  element is not sufficient to create a true label. Assistive technologies like\n  screen readers require labels in code that can be determined programmatically.\n  Some screen readers are programmed to guess what the label should be, based on\n  the surrounding text, but this method is not fool-proof and can lead to\n  confusion if the screen reader guesses wrong.\n</p>',
    'landmark-banner-is-top-level':
      '<p>\n  If the banner landmark is not the top-level landmark (and is contained within\n  another landmark), it does not effectively designate the pre-defined header\n  portion of the layout in the design and therefore prevents screen reader users\n  from being able to easily find their way around the layout.\n</p>\n\n<div class="note">\n  <h3>Note</h3>\n  <p>\n    Landmarks are used to designate sections of the overall page design and\n    layout. Headings are used to designate sections within the content.\n  </p>\n</div>',
    'landmark-complementary-is-top-level':
      '<p>\n  Complementary content is ancillary content to the main theme of a document or\n  page. Screen reader users have the option to skip over complementary content\n  when it appears at the top level of the accessibility API. Embedding an\n  <code>&lt;aside&gt;</code> element in another landmark may disable screen\n  reader functionality allowing users to navigate through complementary content.\n</p>',
    'landmark-contentinfo-is-top-level':
      "<p>\n  The purpose of the <code>contentinfo</code> landmark can be defeated when\n  placed within another landmark, as it can prevent blind screen reader users\n  from being able to quickly find and navigate to the appropriate landmark.\n</p>\n\n<p>\n  When screen reader users have to sort through too much extra information to\n  find what they're looking for, such as not being able to quickly figure out\n  which landmark contains the content information they're looking for negates\n  the purpose of an existing <code>contentinfo</code> landmark.\n</p>",
    'landmark-main-is-top-level':
      '<p>\n  Navigating a web page is far simpler for screen reader users if the content\n  splits between some high-level sections. Content outside of these sections is\n  difficult to find, and its purpose may be unclear.\n</p>\n\n<p>\n  HTML has historically lacked some key semantic markers, such as the ability to\n  designate sections of the page as the header, navigation, main content, and\n  footer. Using both HTML5 elements and ARIA landmarks in the same element is\n  considered a best practice, but the future probably favors HTML regions as\n  browser support increases.\n</p>\n\n<p>\n  The HTML Living Standard states "A hierarchically correct main element is one\n  whose ancestor elements <em>are limited</em> to <samp>&lt;html&gt;</samp>,\n  <samp>&lt;body&gt;</samp>, <samp>&lt;div&gt;</samp>,\n  <samp>&lt;form</samp> without an accessible name, and autonomous custom\n  elements. Each main element must be a hierarchically correct main element."\n  This may reflect a "best practice" based on W3C validation.\n</p>',
    'landmark-no-duplicate-banner':
      '<p>\n  Landmarks allow blind users to navigate and find content quickly. Missing\n  landmarks require screen reader users to sort through too much extra\n  information to find anything.\n</p>\n<p>\n  JAWS, NVDA, and VoiceOver support the ability to navigate to sections of a web\n  page using ARIA landmarks. Landmarks provide a more elegant solution to the\n  problem of providing a way for users to skip to the main content of the web\n  page. There is no visible alteration to the web design, making it unobtrusive\n  and invisible. Of course, the fact that this technique is invisible is fine\n  for blind screen reader users, but not so fine for sighted keyboard users or\n  screen enlarger users with low vision. In this sense, HTML 5 regions and ARIA\n  landmarks cannot yet replace the old-fashioned "skip navigation" links.\n  Browsers still do not have a built-in way to notify users that HTML 5 regions\n  or ARIA landmarks are present. Screen reader users are the only ones who can\n  take advantage of them. There is a\n  <a href="https://github.com/davidtodd/landmarks" class="external" target="_blank">Firefox ARIA landmark extension\n    <img src="/assets/images/template/courses2014/new-window.png" alt="opens in a new window" class="new_window" width="13" height="13"></a>\n  available, which adds the ability to navigate by landmarks in Firefox, but\n  this is not a native feature of the browser.\n</p>',
    'landmark-no-duplicate-contentinfo':
      '<p>\n  One of the main purposes of landmarks is to allow blind users to quickly find\n  and navigate to the appropriate landmark, so you should keep the total number\n  of landmarks relatively low. If you don\'t, screen reader users will have to\n  sort through too much extra information to find what they\'re looking for.\n</p>\n<p>\n  Despite all of the talk about using correct semantic structure for\n  accessibility, HTML has historically lacked some key semantic markers, such as\n  the ability to designate sections of the page as the header, navigation, main\n  content, and footer. With HTML5, these designations are possible, using the\n  new elements <code>header</code>, <code>nav</code>, <code>main</code>, and\n  <code>footer</code>. Similar functionality is available using the ARIA\n  (Accessible Rich Internet Application) attributes <code>role="banner"</code>,\n  <code>role="navigation"</code>, <code>role="main"</code> and\n  <code>role="contentinfo"</code>.\n</p>\n\n<p>\n  JAWS, NVDA, and VoiceOver support the ability to navigate to sections of a web\n  page using ARIA landmarks. Landmarks provide a more elegant solution to the\n  problem of providing a way for users to skip to the main content of the web\n  page. There is no visible alteration to the web design, making it unobtrusive\n  and invisible. Of course, the fact that this technique is invisible is fine\n  for blind screen reader users, but not so fine for sighted keyboard users or\n  screen enlarger users with low vision. In this sense, HTML 5 regions and ARIA\n  landmarks cannot yet replace the old-fashioned "skip navigation" links.\n  Browsers still do not have a built-in way to notify users that HTML 5 regions\n  or ARIA landmarks are present. Screen reader users are the only ones who can\n  take advantage of them. There is a\n  <a href="https://github.com/davidtodd/landmarks" class="external" target="_blank">Firefox ARIA landmark extension\n    <img src="/assets/images/template/courses2014/new-window.png" alt="opens in a new window" class="new_window" width="13" height="13"></a>\n  available, which adds the ability to navigate by landmarks in Firefox, but\n  this is not a native feature of the browser.\n</p>',
    'landmark-no-duplicate-main':
      '<p>\n  Navigating a web page is far simpler for screen reader users if all of the\n  content splits between one or more high-level sections. Content outside of\n  these sections is difficult to find, and its purpose may be unclear.\n</p>\n\n<p>\n  HTML has historically lacked some key semantic markers, such as the ability to\n  designate sections of the page as the header, navigation, main content, and\n  footer. Using both HTML5 elements and ARIA landmarks in the same element is\n  considered a best practice, but the future will favor HTML regions as browser\n  support increases.\n</p>',
    'landmark-unique':
      '<p>\n  <code>landmark-unique</code> is a new best practice rule ensures that\n  landmarks have a unique role or accessible name (i.e. role, label, title)\n  combination.\n</p>',
    list: '<p>\n  Screen readers have a specific way of announcing lists. This feature makes\n  lists clearer to understand, but will only work if lists are properly\n  structured.\n</p>\n<p>\n  When content elements other than list items are contained within a set of list\n  elements, screen readers cannot inform the listener that they are listening to\n  items within the list.\n</p>\n<p>\n  For a list to be valid, it must have both parent elements (a set of\n  <code>ul</code> elements or a set of <code>ol</code> elements) and child\n  elements (declared inside of these tags using the <code>li</code> element),\n  and any other content elements are invalid.\n</p>\n<p>\n  Although some <em>non-content</em> elements such as script, template, style,\n  meta, link, map, area, and datalist are permitted within lists,\n  <em>content</em> elements other than <code>li</code> are not permitted.\n</p>',
    listitem:
      "<p>\n  For a list to be valid, it must have both parent and child elements. Parent\n  elements can either be a set of <code>ul</code> tags or a set of\n  <code>ol</code> tags. Child elements must be declared inside of these tags\n  using the <code>li</code> tag.\n</p>\n\n<p>\n  Screen readers notify users when they come to a list, and tell them how many\n  items are in a list. Announcing the number of items in a list and the current\n  list item helps listeners know what they are listening to, and what to expect\n  as they listen to it.\n</p>\n\n<p>\n  If you don't mark up a list using proper semantic markup in a hierarchy, list\n  items cannot inform the listener that they are listening to a list when no\n  parent is indicating the presence of a list and the type of list.\n</p>",
    marquee:
      '<p>\n  The <code>marquee</code> element creates scrolling text that is difficult to\n  read and click on. Beyond that, it can be distracting to viewers, especially\n  to those with low vision, cognitive disabilities, or attention deficits.\n</p>\n<p>\n  People with attention deficits or cognitive disabilities could become\n  distracted by content that scrolls. If scrolling content contains links,\n  people with limited fine motor abilities may not be able to click on the links\n  accurately. Users with visual impairments may not be able to see the scrolling\n  text with enough acuity to know what the content says.\n</p>',
    'meta-refresh':
      '<p>\n  Since users do not expect a page to refresh automatically, such refreshing can\n  be disorienting. Refreshing also moves the programmatic focus back to the top\n  of the page, away from where the user had it. Such resetting is frustrating\n  for users.\n</p>\n<p>\n  Redirection and page refresh through the use of the\n  <code>&lt;meta&gt;</code> element is problematic for users with disabilities\n  in many ways. The primary reason why redirects and refreshes are problematic\n  is that the user has no control over when the redirect or refresh occurs. If\n  the purpose of the <code>&lt;meta&gt;</code> element is to redirect the user\n  to a new location, server-side means should be employed instead of\n  client-side. Content that moves or auto-updates can be a barrier to anyone who\n  has trouble reading the stationary text as quickly as well as to anyone who\n  has trouble tracking moving objects. It can also cause problems for screen\n  readers.\n</p>',
    'object-alt':
      '<p>\n  Screen readers have no way of translating non-text content into text announced\n  to users. Instead, they read out alternative text. For screen reader users to\n  obtain the information contained in embedded <code>object</code> elements\n  which must contain short, descriptive alternative text.\n</p>\n\n<p>\n  The <code>object</code> element defines an embedded object within a document.\n  It is used to embed multimedia (audio, video, applets, etcetera.) or another\n  web page into the document. The object element needs a text alternative so\n  that users of screen readers know the contents of the object.\n</p>\n<p>\n  When writing a text alternative, keep in mind that the purpose of the\n  alternative text is to relay information to blind users about the image’s\n  contents and purpose - blind users should be able to get as much information\n  from alternative text as a sighted user gets from the image. Alternative text\n  should give the intent, purpose, and meaning of the image.\n</p>\n<p>\n  When writing alternative text, it’s helpful to keep the following questions in\n  mind:\n</p>\n<ul>\n  <li>Why is the non-text content here?</li>\n  <li>What information is it presenting?</li>\n  <li>What purpose does it fulfill?</li>\n  <li>\n    If I could not use the non-text content, what words would I use to convey\n    the same information or function?\n  </li>\n</ul>\n\n<p>\n  Be sure that all text contained in this attribute is useful. Words like\n  “chart”, “image”, “diagram”, or image file names tend not to be very useful.\n</p>',
    'presentation-role-conflict':
      '<p>\n  There are certain cases where the semantic role of an element with\n  <code>role="none"</code> or <code>role="presentation"</code> does not resolve\n  to none or presentation (respectively). When this happens, the element is not\n  removed from the accessibility tree (as expected) and screen readers are able\n  to interact with it.\n</p>\n<p>\n  To ensure the element remains removed from the accessibility tree, you should\n  not add any global ARIA attributes to the element or make if focusable.\n</p>',
    'role-img-alt':
      "<p>\n  Screen readers have no way of translating an image into words that gets read\n  to the user, even if the image only consists of text. As a result, it's\n  necessary for images to have short, descriptive and accessible alternative\n  text so screen reader users clearly understand the image's contents and\n  purpose.\n</p>\n<p>\n  If you can't see, all types of visual information, including images, are\n  completely useless unless an accessible text alternative is provided which\n  screen readers can convert into either sound or braille. People with low\n  vision or color-blindness disabilities also require accessible alternative\n  text to varying degrees.\n</p>\n<p>\n  Screen readers cannot convert visual image information to speech or braille in\n  the absence of an accessible text alternative associated with the image.\n</p>",
    'scope-attr-valid':
      '<p>\n  The <code>scope</code> attribute makes table navigation much easier for screen\n  reader users, provided that it is used correctly. Incorrectly used,\n  <code>scope</code> can make table navigation much harder and less efficient.\n</p>\n\n<p>\n  A screen reader operates under the assumption that a table has a header and\n  that this header specifies a scope. Because of the way screen readers\n  function, having an accurate header makes viewing a table far more accessible\n  and more efficient for people who use the device.\n</p>',
    'scrollable-region-focusable':
      '<p>\n  Checks scrollable content for focusable elements enabling keyboard navigation.\n  Keyboard navigation should not fail when focus moves to an element within a\n  scrollable region.\n</p>',
    'select-name':
      '<p>\n  Effective form labels are required to make forms accessible. The purpose of\n  form elements such as checkboxes, radio buttons, input fields, etcetera, is\n  often apparent to sighted users, even if the form element is not\n  programmatically labeled. Screen readers users require useful form labels to\n  identify form fields. Adding a label to all form elements eliminates ambiguity\n  and contributes to a more accessible product.\n</p>\n<p>\n  When labels for form elements are absent, screen reader users do not know the\n  input data expectations. Screen readers cannot programmatically determine\n  information about input objects without an established label relationship (or\n  redundant text serving as a label).\n</p>',
    'server-side-image-map':
      '<p>\n  Server-side image maps are not keyboard accessible; mouse clicks are required\n  to access the links contained in the image, making the image inaccessible to\n  people who only use keyboards for their navigation.\n</p>\n\n<p>\n  Server side image maps pass the coordinates of the mouse click to the\n  server-side script used to process the image map. Because they rely on mouse\n  clicks, they are not keyboard accessible, whereas client-side image maps are\n  keyboard accessible. Further, it is not possible to provide text alternatives\n  to the actionable areas of a server-side image map like you can with the\n  <code>area</code>s of a client-side image map.\n</p>',
    'skip-link':
      '<p>\n  Screen readers announce content sequentially as it appears in the HTML file.\n  What this means for users of assistive technology is that the content at the\n  top of the page, typically including the entire navigation, is read out to the\n  user before reaching any of the main content. Since content at the top of the\n  page can often be very lengthy, it can be time-consuming to listen to or tab\n  through all of it when the user is only interested in the main content.\n  Including a skip link in an HTML page is beneficial to blind users, users with\n  low vision, and mouse-only users.\n</p>',
    'svg-img-alt':
      '<p>\n  The intent of\n  <a href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-content">Success Criterion 1.1.1</a>\n  is to make information conveyed by non-text content (including SVG images)\n  accessible through the use of a text alternative. Text alternatives are a\n  primary way for making information accessible because they can be rendered\n  through any sensory modality (for example, visual, auditory or tactile) to\n  match the needs of the user. Providing text alternatives allows the\n  information to be rendered in a variety of ways by a variety of user agents.\n  For example, a person who cannot see a picture can have the text alternative\n  read aloud using synthesized speech. A person who cannot hear an audio file\n  can have the text alternative displayed so that he or she can read it. In the\n  future, text alternatives will also allow information to be more easily\n  translated into sign language or into a simpler form of the same language.\n</p>',
    tabindex:
      '<p>\n  Using <code>tabindex</code> with a value greater than 0 can create as many\n  problems as it solves. It creates an unexpected tab order, which makes the\n  page less intuitive and can give the appearance of skipping certain elements\n  entirely.\n</p>\n\n<p>\n  Here are some of the problems that <code>tabindex</code> (with a value of 1 or\n  greater) causes:\n</p>\n<ul>\n  <li>\n    <strong>Unexpected tab order:</strong> From the perspective of the user,\n    <code>tabindex</code> changes the default tab order in unexpected ways,\n    possibly causing disorientation.\n  </li>\n  <li>\n    <strong>Items can appear to be skipped entirely:</strong> Items appear in\n    the tab order only once. If a user tabs past the <code>tabindex</code> items\n    and continues through the rest of the web page, at some point the user\n    arrives at the location of the <code>tabindex</code> items, but the tabbing\n    process skips over these links, because the user already tabbed through them\n    at the beginning of the cycle. Incorrect tab orders are frustrating when\n    users are unable access items, and may not know that (s)he needs to cycle\n    through the entire set of links on the page to reaccess those links.\n  </li>\n  <li>\n    <strong>All <code>tabindex</code> items are tabbed to before any non-<code>tabindex</code>\n      items.</strong>\n    If you want to change the tab order of the first items AND of a section\n    later in the page, you would need to set the <code>tabindex</code> value for\n    every single item through to the end of the modified section. Taken to a bit\n    of an extreme, if you have 20 links on a page, and if you set the\n    <code>tabindex</code> of one of those links to <code>tabindex="100"</code>,\n    the user tabs to that link first, even though there are fewer than 100 links\n    on the page. There is no way to modify the tab order of sections later in\n    the page unless you manually set the tab order of all the links before that\n    section.\n  </li>\n</ul>',
    'table-duplicate-name':
      '<p>\n  Screen readers have a specific way of announcing tables. When tables are not\n  properly marked up, this creates the opportunity for confusing or inaccurate\n  screen reader output.\n</p>\n<p>\n  When tables have summary and caption text that is identical, screen reader\n  users can be confused and find it difficult to know the name and purpose of\n  the table.\n</p>',
    'td-headers-attr':
      "<p>\n  Screen readers have a specific way of announcing tables. When tables are not\n  properly marked up, this creates the opportunity for confusing or inaccurate\n  screen reader output.\n</p>\n<p>\n  Sighted users can usually tell at a glance what the table's headers are and\n  what their relationship to the data is. For non-sighted users this must be\n  done in the markup.\n</p>\n\n<p>\n  When a data table is designed with accessibility in mind, the user enters into\n  table navigation mode, which allows the user to navigate from cell to cell\n  within the table while hearing the screen reader announce the corresponding\n  table headers for the data cells. Hearing the table headers is especially\n  helpful when navigating through large data tables, or when cells contain\n  similar-sounding data that could be easily confused.\n</p>\n\n<p>\n  Table navigation mode is not useful, though, if the table lacks accessibility\n  features.\n</p>",
    'th-has-data-cells':
      '<p>\n  Screen readers have a specific way of announcing tables. When tables are not\n  properly marked up, this creates the opportunity for confusing or inaccurate\n  screen reader output.\n</p>\n<p>\n  When tables are not marked up semantically and do not have the correct header\n  structure, screen reader users cannot correctly perceive the relationships\n  between the cells and their contents visually.\n</p>',
    'valid-lang':
      "<p>\n  When configuring a screen reader, users select a default language. If the\n  language of a webpage is not specified, the screen reader assumes it is the\n  default language set by the user. Language selection becomes an issue for\n  users who speak multiple languages and access the website in more than one\n  language. It is essential to specify a language and ensure that it is valid so\n  website text is pronounced correctly.\n</p>\n<p>\n  Screen readers use different sound libraries for each language, based on the\n  pronunciation and characteristics of that language. Screen readers can switch\n  between these language libraries easily, but only if the documents specify\n  which language(s) to read. If the language is not specified, the screen reader\n  reads the document in the user's default language, resulting in a confusing\n  experience!\n</p>",
    'video-caption':
      '<p>\n  If a video has no caption, deaf users have limited or no access to the\n  information contained in it. Even if a captions track is available, ensure\n  that it contains all meaningful information in the video, not just dialogue.\n</p>\n<p>\n  Deaf viewers can see everything in the video but are not able to hear any of\n  it without captions. Without a caption track, deaf viewers do not have a way\n  of knowing the dialog, narration, or the essential sounds not spoken by\n  people, such as "dramatic instrumental music," applause, screams, or other\n  sounds that set the scene, provide context, or give meaning to the video.\n</p>',
    'no-autoplay-audio':
      '<p>\n  People who are blind or have low vision and use screen reading software can\n  find it hard to hear the screen reader\'s speech output if there is other audio\n  playing at the same time. If automatically playing audio lasts more than three\n  seconds, an easily located, accessible mechanism must be provided to pause or\n  stop the audio or control the audio volume. An audio control allows screen\n  reader users to hear the screen reader without other sounds playing.\n</p>\n\n<div class="note">\n  <h3>Note:</h3>\n  <p>\n    Playing audio automatically when landing on a page may affect a screen\n    reader user\'s ability to find the mechanism to stop it because they navigate\n    by listening and automatically started sounds might interfere with that\n    navigation. Therefore, we discourage the practice of automatically starting\n    sounds (especially if they last more than three seconds), and encourage that\n    the sound be started by an action initiated by the user after they reach the\n    page, rather than requiring that the sound be stopped by an action of the\n    user after they land on the page.\n  </p>\n</div>',
    'aria-hidden-body':
      '<p>\n  When <code>&lt;body aria-hidden="true"</code>, content is not\n  accessible to assistive technology.\n</p>\n<p>\n  Applying <code>aria-hidden="true"</code> to otherwise accessible objects: A\n  web page is designed to be fully accessible, and it would be accessible if\n  elements do not contain the\n  <code>aria-hidden="true"</code> attribute value. Screen readers do\n  not read content marked with the\n  <code>aria-hidden="true"</code> attribute value. Users can still tab\n  to focusable elements in the hidden objects, but screen readers remain silent.\n</p>\n<p>\n  Any content or interface elements intentionally hidden from users — e.g.,\n  inactive dialogs, collapsed menus — must also be hidden from screen reader\n  users. When items are available to sighted users — such as when they activate\n  a button or expand a menu item — the same items must be available to screen\n  reader users. The goal is to provide screen reader users an equivalent user\n  experience to sighted users. If there is a compelling reason to hide content\n  from sighted users, there is usually a compelling reason also to hide that\n  content from blind users. Further, when content is made available to sighted\n  users, it makes sense to make it available to blind users as well.\n</p>',
    'aria-required-attr':
      "<p>\n  ARIA widget roles require additional attributes that describe the state of the\n  widget. The state of the widget is not communicated to screen reader users if\n  a required attribute is omitted.\n</p>\n\n<p>\n  Certain roles act as composite user interface widgets. As such, they typically\n  act as containers that manage other, contained widgets. When an object\n  inherits from multiple ancestors and one ancestor indicates support for one\n  property while another ancestor indicates that the same property is required,\n  the property becomes required on the inheriting object. In some cases, default\n  values are sufficient to meet ARIA attribute requirements.\n</p>\n\n<p>\n  When required state and property attributes for specific roles (and subclass\n  roles) are not present, screen readers may not be able to convey the\n  definition of what the element's role is to the users.\n</p>",
    bypass:
      '<p>\n  Since web sites often display secondary, repeated content on multiple pages\n  (such as navigation links, heading graphics, and advertising frames),\n  keyboard-only users benefit from faster, more direct access to the primary\n  content on a page. This reduces keystrokes and minimizes associated physical\n  pain.\n</p>\n\n<p>\n  For users who cannot use a mouse, navigating with a keyboard is more difficult\n  and time-consuming when the interface does not include methods to make\n  keyboard navigation easier. For example, to activate a link in the middle of a\n  web page, a keyboard user may have to tab through a large number of links and\n  buttons in the header and main navigation of the page.\n</p>\n\n<p>\n  At the extreme end, users with severe motor limitations might require several\n  minutes to tab through all of those elements, and can lead to fatigue and\n  possible physical pain for some users. Even users with less severe constraints\n  will require longer than mouse users, who can click on the desired link in a\n  second or two.\n</p>',
    'color-contrast':
      "<p>\n  Some people with low vision experience low contrast, meaning that there aren't\n  very many bright or dark areas. Everything tends to appear about the same\n  brightness, which makes it hard to distinguish outlines, borders, edges, and\n  details. Text that is too close in luminance (brightness) to the background\n  can be hard to read.\n</p>\n<p>\n  There are nearly three times more individuals with low vision than those with\n  total blindness. One in twelve people cannot see the average full spectrum of\n  colors - about 8% of men and 0.4% of women in the US. A person with low vision\n  or color blindness is unable to distinguish text against a background without\n  sufficient contrast.\n</p>\n<p>Color transparency and opacity is taken into account in the background.</p>\n<p>\n  Color transparency and opacity in the foreground is more difficult to detect\n  and account for due to:\n</p>\n<ul>\n  <li>1:1 colors in foreground and background.</li>\n  <li>CSS background gradients.</li>\n  <li>Background colors in CSS pseudo-elements.</li>\n  <li>Background colors created with CSS borders.</li>\n  <li>\n    Overlap by another element in the foreground - this sometimes comes up with\n    tricky positioning.\n  </li>\n  <li>Elements moved outside the viewport via CSS.</li>\n</ul>",
    'document-title':
      '<p>\n  Screen reader users use page titles to get an overview of the contents of the\n  page. Navigating through pages can quickly become difficult and confusing for\n  screen reader users if the pages are not marked with a title. The page\n  <code>title</code> element is the first thing screen reader users hear when\n  first loading a web page.\n</p>\n\n<p>\n  The <code>title</code> is the first thing that screen reader users hear when\n  they arrive at a page. If there is no <code>title</code> or if the\n  <code>title</code> is not descriptive and unique, screen reader users must\n  read through the page to determine its contents and purpose.\n</p>',
    'duplicate-id-aria':
      "<p>\n  Duplicate IDs are common validation errors that may break the accessibility of\n  labels, e.g., ARIA elements, form fields, table header cells.\n</p>\n<p>\n  Unique ID's differentiate each element from another and prevent invalid\n  markup, wherein only the first instance gets acted upon by client-side\n  scripting, or where assistive technologies typically only reference the first\n  one accurately.\n</p>",
    'duplicate-id':
      "<p>\n  The ID attribute uniquely identifies elements on a page. It does not make\n  sense to duplicate an ID.\n</p>\n\n<p>\n  Duplicate ID's can break the accessibility of labels for forms, table header\n  cells, etc., by the second instance being skipped by screen readers, or by\n  client-side scripts. They are common markup validation errors that can\n  eliminate possible sources of accessibility problems, when not breaking\n  accessibility.\n</p>\n\n<p>\n  Those experienced with client-side scripting know that when you re-use an id,\n  typically the only one that gets acted upon by the scripting is the first\n  instance of the use of that ID. Similarly, assistive technologies may, when\n  referencing an id, only reference the first one accurately.\n</p>",
    'empty-heading':
      "<p>\n  Screen readers alert users to the presence of a heading tag. If the heading is\n  empty or the text cannot be accessed, this could either confuse users or even\n  prevent them from accessing information on the page's structure.\n</p>\n\n<p>\n  If the text inside a heading cannot be accessed by a screen reader, users of\n  this technology will not be able to hear the contents of the heading. Since\n  headings relay the structure of a webpage, it's crucial that users of screen\n  readers are able to access the contents.\n</p>\n<p>\n  Applying heading markup (<code>&lt;h1&gt;</code> through\n  <code>&gt;&lt;h6&gt;</code>) is a quick way to make text stand out, however,\n  using it for anything other than headings will make navigating a web page more\n  confusing for users of assistive technology.\n</p>\n<p>\n  In addition to making the page more accessible, headings have other benefits,\n  since search engines use headings when filtering, ordering, and displaying\n  results. Improving the accessibility of your site can also have the effect of\n  making your page more findable.\n</p>\n<p>\n  In the same way that sighted users can glance at a page and get a sense of its\n  contents, users of screen readers can do the same by navigating through\n  headings. Well written and properly ordered headings can save users,\n  especially those who use screen readers, a lot of time and frustration.\n</p>",
    'form-field-multiple-labels':
      '<p>\n  Assigning multiple labels to the same form field can cause problems for some\n  combinations of screen readers and browsers, and the results are inconsistent\n  from one combination to the next. Some combinations will read the first label.\n  Some will read the last label. Others will read both labels.\n</p>',
    'heading-order':
      '<p>\n  The underlying purpose of headers is to convey the structure of the page. For\n  sighted users, the same purpose is achieved using different sizes of text.\n  Text size, however, is not helpful for users of screen readers, because a\n  screen reader identifies a header only if it is properly marked-up. When\n  heading elements are applied correctly, the page becomes much easier to\n  navigate for screen reader users and sighted users alike.\n</p>\n\n<p>\n  In the same way that sighted users can glance at a page and get a sense of its\n  contents, users of screen readers can do the same by navigating through\n  headings. Well written and properly ordered headings can save users,\n  especially those who use screen readers, a lot of time and frustration.\n</p>\n\n<p>\n  The purpose of headings is to describe the structure of the webpage, not just\n  highlight important text. They should be brief, clear, unique, and marked with\n  <code>h1</code> through <code>h6</code> elements applied in hierarchical\n  order. All of these qualities make headings valuable tools for screen reader\n  users. Similar to the way sighted users can glance at a page and get a sense\n  of its contents, screen reader users can navigate through headings. Well\n  written and properly ordered headings can save screen reader time and\n  frustration.\n</p>\n\n<p>\n  In addition to making the page more accessible, headings have other benefits\n  since search engines use headings when filtering, ordering, and displaying\n  results. Improving the accessibility of your site can also have the effect of\n  making your page more findable.\n</p>',
    'html-has-lang':
      "<p>\n  When configuring a screen reader, users select a default language. If the\n  language of a webpage is not specified, the screen reader assumes the default\n  language set by the user. Language settings become an issue for users who\n  speak multiple languages and access website in more than one language. It is\n  essential to specify a language and ensure that it is valid so website text is\n  pronounced correctly.\n</p>\n<p>\n  Screen readers use different sound libraries for each language, based on the\n  pronunciation and characteristics of that language. Screen readers can switch\n  between these language libraries easily, but only if the documents specify\n  which language(s) to read and when. If the language is not specified, the\n  screen reader reads the document in the user's default language, resulting in\n  a strange accent! It is impossible to understand anything when screen readers\n  are using the wrong language library.\n</p>",
    'html-lang-valid':
      "<p>\n  When configuring a screen reader, users select a default language. If the\n  language of a webpage is not specified, the screen reader assumes the default\n  language set by the user. Language settings are an issue for users who speak\n  multiple languages and access website in more than one language. It is\n  essential to specify a language and ensure that it is valid so website text is\n  pronounced correctly.\n</p>\n<p>\n  Screen readers use different sound libraries for each language, based on the\n  pronunciation and characteristics of that language. Screen readers can switch\n  between these language libraries easily, but only if the documents correctly\n  specify which language(s) to read. If the language is not specified, the\n  screen reader reads the document in the user's default language, resulting in\n  a confusing accent! It is impossible to understand anything when screen\n  readers are using the wrong language library.\n</p>",
    'label-title-only':
      '<p>\n  The <code>title</code> and <code>aria-describedby</code> attributes are used\n  to provide additional information such as a hint. Hints are exposed to\n  accessibility APIs differently than labels and as such, this can cause\n  problems with assistive technologies.\n</p>\n\n<p>\n  When form inputs such as text entry fields, radio buttons, check boxes, and\n  select menus contain no labels other than <code>title</code> and\n  <code>aria-describedby</code> attribute values, screen readers interpret the\n  content as advisory information only. Labels created by the\n  <code>title</code> and <code>aria-describedby</code> values are not sufficient\n  to create a true label that can be determined programmatically from the code\n  to convey the purpose of the input form element.\n</p>',
    'link-in-text-block':
      "<p>\n  Some people with low vision experience low contrast, meaning that there aren't\n  very many bright or dark areas. Everything tends to appear about the same\n  brightness, which makes it hard to distinguish outlines, borders, edges, and\n  details. Text that is too close in luminance (brightness) to the background\n  can be hard to read.\n</p>\n<p>\n  There are nearly three times more individuals with low vision than those with\n  total blindness. One person in twelve has a color deficiency - about 8% of men\n  and 0.4% of women in the US. A person with low vision or color blindness is\n  unable to distinguish text against a background without sufficient contrast.\n</p>\n<p>\n  When a sufficient color contrast ratio of 3:1 is not present to distinguish\n  link text color from surrounding text color, users with low vision who\n  experience low contrast cannot detect visually that the text is intended to\n  function as a link.\n</p>",
    'link-name':
      '<ul>\n  <li>\n    <p>\n      Inaccessible link elements pose barriers to accessibility, as they are a\n      fundamental component of a website.\n    </p>\n  </li>\n  <li>\n    <p>\n      Users who rely exclusively on a keyboard (and no mouse) to navigate a\n      webpage can only click on links that can receive programmatic focus. A\n      link that cannot receive programmatic focus is inaccessible to these\n      users.\n    </p>\n  </li>\n\n  <li>\n    <p>\n      Like sighted users, screen reader users need to know where a link is\n      pointing. Inner link text provides this information, though it won\'t get\n      used if a screen reader can\'t access it.\n    </p>\n  </li>\n\n  <li>\n    <p>\n      Keyboard users, including visually impaired screen reader users or people\n      who cannot use a mouse, can activate only the links and form elements that\n      can receive programmatic focus. Any events activated exclusively by other\n      types of focus, for example <code>onmouseover</code> events that depend on\n      the mouse hover focus, are inaccessible to keyboard users. Only links and\n      form elements receive keyboard focus by default. Modify elements that are\n      not links or form components to receive focus by adding\n      <code>tabindex="0"</code>.\n    </p>\n  </li>\n</ul>',
    'meta-viewport-large':
      '<p>\n  The <code>user-scalable="no"</code> parameter inside the\n  <code>content</code> attribute of\n  <code>&lt;meta name="viewport"&gt;</code> element disables zooming on a page.\n  The <code>maximum-scale</code> parameter limits the amount the user can zoom.\n  This is problematic for people with low vision who rely on screen magnifiers\n  to properly see the contents of a web page.\n</p>\n\n<p>\n  Users with partial vision and low vision often choose to enlarge the fonts on\n  their browser to make text on the web easier to read. The browser\'s viewport\n  focus is everything visible in the browser window at a given moment. If the\n  user maximizes the browser to full size on a high-resolution monitor, the\n  viewport focus area is large and may include the entire web page.\n</p>\n<p>\n  If the browser window is small, the viewport focus area includes only a small\n  part of the web page. The browser\'s viewport focus does not affect the\n  programmatic focus. Users can scroll up and down the web page, but the\n  programmatic focus does not follow the viewport. The Web Content Accessibility\n  Guidelines calls for developers to design pages so that they support resize up\n  to 200%; however, it is a best practice to require 5x zoom.\n</p>',
    'meta-viewport':
      '<p>\n  The <code>user-scalable="no"</code> parameter inside the\n  <code>content</code> attribute of\n  <code>&lt;meta name="viewport"&gt;</code> element disables zooming on a page.\n  The <code>maximum-scale</code> parameter limits the amount the user can zoom.\n  This is problematic for people with low vision who rely on screen magnifiers\n  to properly see the contents of a web page.\n</p>\n\n<p>\n  Users with partial vision and low vision often choose to enlarge the fonts on\n  their browser to make text on the web easier to read. The browser\'s viewport\n  focus is everything visible in the browser window at a given moment.\n  Maximizing the browser to full size on a high-resolution monitor creates a\n  large the viewport focus area and may include the entire web page.\n</p>\n<p>\n  If the browser window is small, the viewport focus area only includes a small\n  part of the web page. The browser\'s viewport focus does not affect the\n  programmatic focus. Users can scroll up and down the web page, but the\n  programmatic focus does not follow the viewport. The Web Content Accessibility\n  Guidelines calls for developers to design pages so that they support resize up\n  to 200%.\n</p>\n<p>\n  Ensures that the <code>user-scalable="no"</code> parameter is not present in\n  the <code>&lt;meta name="viewport"&gt;</code> element and the\n  <code>maximum-scale</code> parameter is not less than 2.\n</p>',
    'nested-interactive':
      '<p>\n  Focusable elements with an interactive control ancestor (any element that\n  accepts user input such as button or anchor elements) are not announced by\n  screen readers and create an empty tab stop. That is, you could tab to the\n  element but the screen reader will not announce its name, role, or state.\n</p>',
    'page-has-heading-one':
      "<p>\n  Screen reader users can use keyboard shortcuts to navigate directly to the\n  first <code>h1</code>, which, in principle, should allow them to jump directly\n  to the main content of the web page. If there is no <code>h1</code>, or if the\n  <code>h1</code> appears somewhere other than at the start of the main content,\n  screen reader users must listen to more of the web page to understand its\n  structure, wasting valuable time.\n</p>\n\n<p>\n  Keep in mind that blind users can't just look at a web page and immediately\n  understand its layout the way that a visual user can. Visual users can take in\n  much information about the page layout without having to read all of the\n  content. Blind users don't have that luxury. Screen readers read linearly,\n  which means listening to the entire web page unless there is some other\n  convenient way to get a \"glimpse\" of the page's layout and structure. It turns\n  out that headings are a way to do that. Screen reader users can use keyboard\n  shortcuts to navigate through the heading structure of a document.\n</p>",
    region:
      "<p>\n  Navigating a web page is far simpler for screen reader users if the content\n  splits between multiple high-level sections. Content outside of sections is\n  difficult to find, and the content's purpose may be unclear.\n</p>\n\n<p>\n  Historically, HTML lacked some key semantic markers such as the ability to\n  designate sections of the page as the header, navigation, main content, and\n  footer. Using both HTML5 elements and ARIA landmarks in the same element is\n  considered a best practice, but the future favors using native HTML5 element\n  regions as browser support increases.\n</p>",
    'button-name':
      '<p>\n  Screen reader users are not able to discern the purpose of elements with\n  <code>role="link"</code>, <code>role="button"</code>, or\n  <code>role="menuitem"</code> that do not have an accessible name.\n</p>',
    'aria-allowed-role':
      '<p>\n  Intended accessible technology behavior by a developer is not enabled when an\n  assigned WAI-ARIA role value is invalid for the parent element.\n</p>\n<p>\n  When screen readers and other assistive technologies do not know the role of\n  each element on the web page, they are not able to interact with it\n  intelligently, nor are they able to communicate the role to the user. When the\n  value for a role is invalid, there is no way to communicate the element\'s\n  features, properties, and methods to assistive technologies. For example,\n  applying <code>role="table"</code> to a <code>&lt;ul&gt;</code> effectively\n  hijacks the default semantics associated with the\n  <code>&lt;ul&gt;</code> element in a way that screenreaders do not expect\n  resulting in unexpected behavior.\n</p>',
    'aria-roles':
      "<p>\n  Elements assigned invalid ARIA role values are not interpreted by assistive\n  technology as intended by the developer.\n</p>\n<p>\n  When screen readers and other assistive technologies do not know the role of\n  each element on the web page, they are not able to interact with it\n  intelligently, nor are they able to communicate the role to the user. An\n  element's features, properties, and methods of conveying information to and/or\n  from the user can't be communicated via assistive technologies when a role\n  value is invalid.\n</p>",
    label:
      '<p>\n  Effective form labels are required to make forms accessible. The purpose of\n  form elements such as checkboxes, radio buttons, input fields, etcetera, is\n  often apparent to sighted users, even if the form element is not\n  programmatically labeled. Screen readers users require useful form labels to\n  identify form fields. Adding a label to all form elements eliminates ambiguity\n  and contributes to a more accessible product.\n</p>\n<p>\n  When labels for form elements are absent, screen reader users do not know the\n  input data expectations. Screen readers cannot programmatically determine\n  information about input objects without an established label relationship (or\n  redundant text serving as a label).\n</p>\n<p>\n  The absence of labels prevent fields from receiving focus when read by screen\n  readers, and users with impaired motor control do not get the benefit of a\n  larger clickable area for the control since clicking the label activates the\n  control.\n</p>',
    'landmark-one-main':
      '<p>\n  Navigating a web page is far simpler for screen reader users if all of the\n  content splits between one or more high-level sections. Content outside of\n  these sections is difficult to find, and its purpose may be unclear.\n</p>\n\n<p>\n  HTML has historically lacked some key semantic markers, such as the ability to\n  designate sections of the page as the header, navigation, main content, and\n  footer. Using both HTML5 elements and ARIA landmarks in the same element is\n  considered a best practice, but the future will favor HTML regions as browser\n  support increases.\n</p>',
  };
</script>
