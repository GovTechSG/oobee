name: Push installation image

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  windows-install-oobee:
    runs-on: windows-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          path: oobee

      - name: Copy scripts to parent directory
        run: |
          cp ${{github.workspace}}/oobee/scripts/*.ps1 ${{github.workspace}}
          cp ${{github.workspace}}/oobee/scripts/*.cmd ${{github.workspace}}      
          cp ${{github.workspace}}/oobee/scripts/*.xml ${{github.workspace}}

      - name: Install Purple dependencies for Windows
        shell: pwsh
        run: powershell.exe -NoProfile -ExecutionPolicy Bypass "& ${{github.workspace}}\install_oobee_dependencies.ps1"
        working-directory: ${{github.workspace}}

      - name: Zip entire Purple folder (Windows)
        shell: pwsh
        run: Compress-Archive -Path ${{github.workspace}}/* -DestinationPath oobee-portable-windows.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: oobee-portable-windows
          path: ./oobee-portable-windows.zip

      - name: Release Windows artifact
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            oobee-portable-windows.zip

  mac-install-oobee:
    runs-on: macos-latest
    env:
      CER_B64:     ${{ secrets.ORG_DEVELOPER_ID_APPLICATION_CERT_CER }}
      P12_B64:     ${{ secrets.ORG_DEVELOPER_ID_APPLICATION_PRIVATEKEY_P12 }}
      P12_PASSWORD: ${{ secrets.ORG_DEVELOPER_ID_APPLICATION_PRIVATEKEY_P12_PASSWORD }}
    environment: macos

    steps:
      - name: Clean Workspace Folder
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          path: oobee

      - name: Grant execute permissions for user
        run: chmod ugo+rwx ./scripts/*.command ./scripts/*.sh
        working-directory: oobee

      - name: Copy scripts to parent directory
        run: |
          cp ./oobee/scripts/{*.command,*.sh,*.xml}  ${{ github.workspace }}

      - name: Install Purple dependencies for MacOS
        run: |
          ./install_oobee_dependencies.command

      - name: Decode & import certs into temporary keychain
        run: |
          # --- prepare tmp dir ---
          mkdir -p /tmp/signing

          # --- decode into /tmp ---
          echo "$CER_B64" | openssl base64 -d -A > /tmp/signing/developer_id_application.cer
          echo "$P12_B64" | openssl base64 -d -A > /tmp/signing/developer_id_application.p12

          # --- create & unlock keychain ---
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 7200 build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          # --- import cert + key, grant codesign access ---
          security import /tmp/signing/developer_id_application.cer \
            -k build.keychain \
            -T /usr/bin/codesign
          security import /tmp/signing/developer_id_application.p12 \
            -k build.keychain \
            -P "$P12_PASSWORD" \
            -T /usr/bin/codesign

          # 1) Unlock it (just to be safe)
          security unlock-keychain -p "" build.keychain

          # 2) Allow codesign to use the key without prompting
          security set-key-partition-list \
            -S apple-tool:,apple: \
            -s -k "" \
            build.keychain

          # --- delete entire tmp dir ---
          rm -rf -v /tmp/signing/* && rm -rf /tmp/signing
          
      - name: Locate signing identity
        id: find_identity
        run: |
          ID=$(security find-identity -v -p codesigning build.keychain \
               | grep "Developer ID Application:" \
               | sed -E 's/^[[:space:]]*[0-9]+\) ([^"]+).*$/\1/')
          echo "id=$ID" >> $GITHUB_OUTPUT

      - name: Sign all Mach-O binaries (deep)
        shell: bash
        run: |
          set -euo pipefail

          # Ensure the build keychain is available & unlocked in THIS step
          security list-keychains -d user -s build.keychain
          security default-keychain -d user -s build.keychain
          security unlock-keychain -p "" build.keychain

          echo "Available signing identities in build.keychain:"
          security find-identity -v -p codesigning build.keychain || true

          # Extract the FULL identity name (between the quotes)
          CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain \
            | awk -F\" '/Developer ID Application:/{print $2; exit}')

          if [[ -z "${CERTIFICATE_NAME}" ]]; then
            echo "ERROR: No 'Developer ID Application' identity found in build.keychain."
            exit 1
          fi
          echo "Using identity: ${CERTIFICATE_NAME}"

          # Ensure we can re-sign files (node_modules sometimes read-only)
          chmod -R u+w "$GITHUB_WORKSPACE/oobee"

          # Sign all Mach-O (exec bits OR dylib OR node native addons)
          while IFS= read -r f; do
            echo "Signing $f"
            codesign --force --options runtime --timestamp --sign "${CERTIFICATE_NAME}" "$f"
          done < <(
            find "$GITHUB_WORKSPACE/oobee" -type f \
              \( -perm -111 -o -name "*.dylib" -o -name "*.node" \) \
              ! -path "*/.git/*"
          )

          echo "Verifying signatures..."
          codesign --verify --deep --strict --verbose=2 "$GITHUB_WORKSPACE/oobee"

      - name: Cleanup keychain
        if: always()
        run: security delete-keychain build.keychain
        
      - name: Zip entire Purple folder (Mac)
        run: |
          zip oobee-portable-mac.zip -y -r ./

      - name: Upload Mac artifact
        uses: actions/upload-artifact@v4
        with:
          name: oobee-portable-mac
          path: ./oobee-portable-mac.zip

      - name: Release Mac artifact
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            oobee-portable-mac.zip
