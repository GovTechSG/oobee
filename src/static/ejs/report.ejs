<!doctype html>
<html lang="en" id="accessibility-site-report">
  <head lang="en">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Accessibility Site Report</title>
    <!-- [TESTCODE] Font Awesome CDN -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      integrity="sha512-..."
      crossorigin="anonymous"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml, %3Csvg width='48' height='48' viewBox='0 0 48 48' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='24' cy='24' r='24' fill='%23785EF0'%3E%3C/circle%3E%3Cpath d='M16.2528 24.9725V23.832C16.2528 21.5526 14.4057 19.7056 12.1264 19.7056C9.84708 19.7056 8 21.5526 8 23.832V27.0721C8 29.2906 9.74991 31.0986 11.9448 31.1939V29.2806C11.9448 26.905 13.8772 24.9725 16.2528 24.9725Z' fill='white'%3E%3C/path%3E%3Cpath d='M12.308 29.28V31.1979H16.2528V25.3352C14.0779 25.3352 12.308 27.1051 12.308 29.28Z' fill='white'%3E%3C/path%3E%3Cpath d='M22.8201 25.3289H18.6937V31.1997H22.8201V25.3289Z' fill='white'%3E%3C/path%3E%3Cpath d='M22.8201 17.6016C20.5408 17.6016 18.6937 19.4486 18.6937 21.728V24.9672H22.8201V17.6016Z' fill='white'%3E%3C/path%3E%3Cpath d='M29.3876 17.6016C27.1082 17.6016 25.2612 19.4486 25.2612 21.728V24.9672H29.3876V17.6016Z' fill='white'%3E%3C/path%3E%3Cpath d='M29.3876 25.3289H25.2612V31.1997H29.3876V25.3289Z' fill='white'%3E%3C/path%3E%3Cpath d='M36.3182 31.199C38.5976 31.199 40.4446 29.3519 40.4446 27.0726V25.3281H36.3182V31.199Z' fill='white'%3E%3C/path%3E%3Cpath d='M40.4446 19.7056C38.1653 19.7056 36.3182 21.5526 36.3182 23.832V24.9644H40.4446V19.7056Z' fill='white'%3E%3C/path%3E%3Cpath d='M35.955 23.832C35.955 21.5526 34.1079 19.7056 31.8286 19.7056V22.844C31.8286 23.6195 32.0429 24.3441 32.4143 24.9644H35.955V23.832Z' fill='white'%3E%3C/path%3E%3Cpath d='M35.955 26.9709V25.3281H32.6595C33.4123 26.3261 34.6083 26.9709 35.955 26.9709Z' fill='white'%3E%3C/path%3E%3C/svg%3E"
    />
    <%- include('partials/styles/bootstrap') %> <%- include('partials/styles/highlightjs') %> <%-
    include('partials/styles/styles') %>
  </head>

  <body class="d-flex flex-column">
    <%- include('partials/header') %> <%- include('partials/main') %> <%-
    include('partials/scripts/popper') %> <%- include('partials/scripts/bootstrap') %> <%-
    include('partials/scripts/highlightjs') %> <%- include('partials/scripts/utils') %> <%-
    include('partials/scripts/categorySelectorDropdownScript') %> <%-
    include('partials/scripts/categorySummary') %> <%- include('partials/scripts/ruleOffcanvas') %>
    <%- include('partials/scripts/screenshotLightbox')%>
    <!-- search feat changes -->
    <%- include('partials/scripts/reportSearch') %>
    <script>
      function initTooltips() {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]'),
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          const tooltip = new bootstrap.Tooltip(tooltipTriggerEl);
          tooltipTriggerEl.addEventListener('mouseleave', () => tooltip.hide());
          return tooltip;
        });
      }

      // Scan DATA FUNCTION TO REPLACE NA
      const scanDataWCAGCompliance = () => {
        const wcagComplianceCard = document.querySelector("#wcag-compliance-card")
        const passPecentage = wcagComplianceCard.querySelector('[aria-label="Pass percentage"]')
        passPecentage.innerHTML = scanData.wcagPassPercentage+"%";
        const wcagBarProgess = wcagComplianceCard.querySelector(".wcag-compliance-passes-bar-progress");
        wcagBarProgess.style.width = `${scanData.wcagPassPercentage}%`; // Set this to your desired width
      };

      const scanDataTop5Card = () => {
          const card = document.getElementById("top-five-card");
          const list = card.querySelector(".unbulleted-list");

          // Sort the items based on totalIssues in descending order
          const sortedTop5 = scanData.topFiveMostIssues.sort((a, b) => b.totalIssues - a.totalIssues);
          let i = 0;
          for (i < 5; i++;) {
              const page = sortedTop5[i];
              if (page.totalIssues !== 0) {
                  const listItem = document.createElement('li');
                  listItem.className = "d-flex justify-content-between";

                  const link = document.createElement('a');
                  link.href = page.url;
                  link.target = "_blank";
                  link.textContent = page.pageTitle.length > 0 ? page.pageTitle : page.url;

                  const issueCount = document.createElement('span');
                  issueCount.className = "fw-bold ms-2";
                  issueCount.setAttribute('aria-label', `${page.totalIssues} issues`);
                  issueCount.textContent = page.totalIssues;

                  listItem.appendChild(link);
                  listItem.appendChild(issueCount);

                  list.appendChild(listItem);
              }
          }
      };

      const scanDataCategorySelector = () =>{
        function generateCategorySummary(category, items) {
          let summary = '';

          if (category !== 'passed' && items[category].totalItems !== 0) {
              summary = `${items[category].rules.length} ${items[category].rules.length === 1 ? 'issue' : 'issues'} / ${items[category].totalItems} ${items[category].totalItems === 1 ? 'occurrence' : 'occurrences'}`;
          } else if (category !== 'passed' && items[category].totalItems === 0) {
              summary = '0 issues';
          } else {
              summary = `${items[category].totalItems} ${items[category].totalItems === 1 ? 'occurrence' : 'occurrences'}`;
          }

          return summary;
        }
        const nav = document.querySelector("nav");
        const divs = nav.querySelectorAll(":scope > div");

        divs.forEach(div => {
          let spanCategoryInformation = div.querySelector(".category-information");
          let category = spanCategoryInformation.id.replace("ItemsInformation", "");

          let summary = generateCategorySummary(category,scanItems)
          spanCategoryInformation.innerHTML = summary;

      });

        
      }


      const scanDataHTML = () => {
        const formattedViewerLocalStartTime = formatAboutStartTime(scanData.startTime);
        document.getElementById('aboutStartTime').innerHTML = formattedViewerLocalStartTime;
        document.getElementById('urlScanned').innerHTML = scanData.urlScanned;
        document.getElementById('urlScanned').href = scanData.urlScanned;
        document.getElementById('viewport').innerHTML = scanData.viewport.startsWith("CustomWidth") ? `${scanData.viewport.split("_")[1]} width viewport` : scanData.viewport + ' viewport';
        document.getElementById('pagesScannedModalToggletxt').innerHTML = scanData.isCustomFlow ? scanData.customFlowLabel + ' (' + scanData.totalPagesScanned + ' ' + (scanData.totalPagesScanned === 1 ? 'page' : 'pages') + ')' : scanData.scanType + ' crawl' + ' (' + scanData.totalPagesScanned + ' ' + (scanData.totalPagesScanned === 1 ? 'page' : 'pages') + ')';

        var itemsElement = document.getElementById('items');
        var failedItems = scanItems.mustFix.totalItems + scanItems.goodToFix.totalItems;
        var passedItems = scanItems.passed.totalItems;
        var itemsContent = `${failedItems} ${failedItems === 1 ? 'occurrence' : 'occurrences'} failed,<br>
        <a href="#" id="createPassedItemsFile">${passedItems} ${passedItems === 1 ? 'occurrence' : 'occurrences'} passed</a>`;
        itemsElement.innerHTML = itemsContent;

        var phAppVersionElement = document.getElementById('phAppVersion');
        var versionContent = 'Purple A11y Version ' + scanData.phAppVersion;
        phAppVersionElement.innerHTML = versionContent;

        var isCustomFlow = scanData.isCustomFlow; 
        var pagesScanned = scanData.pagesScanned;
        var pagesScannedList = document.getElementById('pagesScannedList');

        pagesScanned.forEach((page, index) => {
          var listItem = document.createElement('li');

          if (isCustomFlow) {
            listItem.innerHTML = `
              <div class="custom-flow-screenshot-container">
                <img 
                  src="${page.pageImagePath}" 
                  alt="Screenshot of ${page.url}"
                  class="custom-flow-screenshot"
                  onerror="this.onerror = null; this.remove();"
                >
                <div class="display-url-container">
                  <a href="${page.url}" target="_blank">${page.pageTitle.length > 0 ? page.pageTitle : page.url}</a>
                  <p>${page.url}</p>
                </div>
              </div>
            `;
          } else {
            listItem.innerHTML = `
              <a href="${page.url}" target="_blank">${page.pageTitle.length > 0 ? page.pageTitle : page.url}</a>
              <p>${page.url}</p>
            `;
          }

          pagesScannedList.appendChild(listItem);
        });

        var totalPagesNotScanned = scanData.totalPagesNotScanned; 
        var pagesNotScanned = scanData.pagesNotScanned;

        var pagesNotScannedList = document.getElementById('pagesNotScannedList');

        // Only update if there are pages not scanned
        if (totalPagesNotScanned > 0) {
          document.getElementById('totalPagesScannedLabel').innerHTML = scanData.totalPagesScanned;
          document.getElementById('totalPagesNotScannedLabel').innerHTML = scanData.totalPagesNotScanned;

          pagesNotScanned.forEach((page, index) => {
            var listItem = document.createElement('li');
            listItem.innerHTML = `<a class="not-scanned-url" href="${page.url}" target="_blank">${page.url}</a>`;
            pagesNotScannedList.appendChild(listItem);
          });
        }

        // For rest of the page that is not content
        scanDataWCAGCompliance();
        scanDataTop5Card();
        scanDataCategorySelector();

        const cypressScanAboutMetadata = scanData.cypressScanAboutMetadata;
        if (cypressScanAboutMetadata) {
          const metadataItems = Object.keys(cypressScanAboutMetadata);
          metadataItems.forEach((key) => {
            var metadataSpan = document.getElementById('cypressScanAboutMetadata');
            if (metadataSpan) {
              metadataSpan.innerHTML = key[0].toUpperCase() + key.slice(1) + ': ' + cypressScanAboutMetadata[key];
            }
          });
        }

        document.getElementById('pagesScannedModalLabel').innerHTML = scanData.isCustomFlow ? scanData.customFlowLabel + ' (' + scanData.totalPagesScanned + ' ' + (scanData.totalPagesScanned === 1 ? 'page' : 'pages') + ')' : scanData.scanType + ' crawl' + ' (' + scanData.totalPagesScanned + ' ' + (scanData.totalPagesScanned === 1 ? 'page' : 'pages') + ')';

        const createPassedItemsFile = async () => {
          const passedItemsJson = {};

          scanItems.passed.rules.forEach(r => {
            passedItemsJson[r.description] = {
              totalOccurrencesInScan: r.totalItems,
              totalPages: r.pagesAffected.length,
              pages: r.pagesAffected.map(p => ({
                pageTitle: p.pageTitle,
                url: p.url,
                totalOccurrencesInPage: p.items.length,
                occurrences: p.items,
                metadata: p.metadata 
              })),
            };
          });

          const jsonString = JSON.stringify(passedItemsJson, null, 4);

          const blob = new Blob([jsonString], { type: "application/json" });

          const link = document.createElement("a");

          link.href = URL.createObjectURL(blob);

          storagePath = scanData.storagePath;

          link.download = `passed_items.json.txt`;

          document.body.appendChild(link);

          link.click();

          document.body.removeChild(link);

        };

        document.getElementById('createPassedItemsFile').addEventListener('click', async (e) => {
          e.preventDefault();
          await createPassedItemsFile();
          console.log('click');
        });

      };

      const formatAboutStartTime = dateString => {
        const utcStartTimeDate = new Date(dateString);
        const formattedStartTime = utcStartTimeDate.toLocaleTimeString('en-GB', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour12: false,
          hour: 'numeric',
          minute: '2-digit',
          timeZoneName: 'shortGeneric',
        });

        const timezoneAbbreviation = new Intl.DateTimeFormat('en', {
          timeZoneName: 'shortOffset',
        })
          .formatToParts(utcStartTimeDate)
          .find(part => part.type === 'timeZoneName').value;

        //adding a breakline between the time and timezone so it looks neater on report
        const timeColonIndex = formattedStartTime.lastIndexOf(':');
        const timePart = formattedStartTime.slice(0, timeColonIndex + 3);
        const timeZonePart = formattedStartTime.slice(timeColonIndex + 4);
        const htmlFormattedStartTime = `${timePart}<br>${timeZonePart} ${timezoneAbbreviation}`;

        return htmlFormattedStartTime;
      };

      document.addEventListener('DOMContentLoaded', () => {
        initTooltips();
        scanDataHTML();
      });
    </script>
    <!-- Checks if js runs -->
    <script>
      document.getElementById('jsOn').classList.remove('d-none');
      document.getElementById('jsOffMessage').classList.add('d-none');
    </script>
  </body>
</html>