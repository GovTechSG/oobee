<!doctype html>
<html lang="en" id="accessibility-site-report">
  <head lang="en">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Accessibility Site Report</title>
    <!-- [TESTCODE] Font Awesome CDN -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      integrity="sha512-..."
      crossorigin="anonymous"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="data:image/svg+xml,%3Csvg width='48' height='48' viewBox='0 0 48 48' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M23.5 6C11.7707 6 10 11.1369 10 19.23V28.77C10 36.8631 11.7707 42 23.5 42C35.2293 42 37 36.8631 37 28.77V19.23C37 11.1369 35.2293 6 23.5 6ZM25.4903 14.5985V35.0562H21.5097V12.9438H27.8925L25.4903 14.5985Z' fill='%239021A6'/%3E%3C/svg%3E
      "
    />
    <%- include('partials/scripts/decodeUnzipParse') %>
    <%- include('partials/styles/bootstrap') %>
    <%- include('partials/styles/highlightjs') %>
    <%- include('partials/styles/styles') %>
    <%- include('partials/styles/wcagGaugeBar') %>
    <%- include('partials/styles/header') %>
    <%- include('partials/styles/wcagCompliance') %>
    <%- include('partials/styles/topTenCard') %>
  </head>

  <body class="d-flex flex-column">
    <%- include('partials/header') %> <%- include('partials/main') %> <%-
    include('partials/scripts/popper') %> <%- include('partials/scripts/bootstrap') %> <%-
    include('partials/scripts/highlightjs') %> <%- include('partials/scripts/utils') %> <%-
    include('partials/scripts/scanAboutScript') %> <%-
    include('partials/scripts/categorySelectorDropdownScript') %> <%-
    include('partials/scripts/categorySummary') %> <%- include('partials/scripts/ruleOffcanvas') %>
    <%- include('partials/scripts/screenshotLightbox')%>
    <!-- search feat changes -->
    <%- include('partials/scripts/reportSearch') %>
    <%- include('partials/scripts/wcagGaugeBar') %>
    <%- include('partials/scripts/wcagCompliance') %>
    <script>
      function initTooltips() {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]'),
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          const tooltip = new bootstrap.Tooltip(tooltipTriggerEl);
          tooltipTriggerEl.addEventListener('mouseleave', () => tooltip.hide());
          return tooltip;
        });
      }

      // Scan DATA FUNCTION TO REPLACE NA
      const scanDataWCAGList = () => {
        const wcagLinksList = document.getElementById('wcagLinksList');

        Object.entries(scanData.wcagLinks).forEach(([key, value]) => {
          const listItem = document.createElement('li');
          const link = document.createElement('a');
          link.href = value;
          link.target = '_blank';
          link.textContent = key;
          listItem.appendChild(link);
          wcagLinksList.appendChild(listItem);
        });
      };

      const scanDataTop10Card = () => {
        const topIssuesList = document.getElementById('top-issues-list');

        scanData.topTenPagesWithMostIssues.forEach(page => {
          if (page.totalIssues !== 0) {
            const listItem = document.createElement('li');
            listItem.className = 'd-flex justify-content-between';

            const link = document.createElement('a');
            link.href = page.url;
            link.target = '_blank';
            link.rel = 'noopener';
            link.className = 'page-links';
            link.textContent = page.pageTitle.length > 0 ? page.pageTitle : page.url;

            const issues = Number(page.totalIssues) || 0;
            const occ = Number(page.totalOccurrences) || 0;
            const issueWord = issues === 1 ? 'issue' : 'issues';
            const occWord = occ === 1 ? 'occurrence' : 'occurrences';

            const issuesSpan = document.createElement('span');
            issuesSpan.setAttribute('aria-label', `${page.totalIssues} issues`);
            issuesSpan.className = 'ms-2';
            issuesSpan.ariaLabel = page.totalIssues + 'issues';
            issuesSpan.textContent = `${issues} ${issueWord} (${occ} occ.)`;
            issuesSpan.setAttribute('aria-label', `${issues} ${issueWord} (${occ} ${occWord})`);

            listItem.appendChild(link);
            listItem.appendChild(issuesSpan);
            topIssuesList.appendChild(listItem);
          }
        });
      };

      const scanDataCategorySelector = () => {
        const formattedCategoryTitles = {
          mustFix: 'Must Fix',
          goodToFix: 'Good to Fix',
          needsReview: 'Manual Review Required',
          passed: 'Passed',
        };

        const scategoryList = document.getElementById('categorySelector');

        Object.keys(scanItems).forEach(category => {
          if (["mustFix", "goodToFix", "needsReview"].includes(category)) { // skip other keys like pagesScanned, etc
            const categoryData = scanItems[category];
            const listItem = document.createElement('div');
            listItem.className = 'col-md-4 px-2';

            const button = document.createElement('button');
            button.setAttribute('aria-labelledby', `${category}Title ${category}ItemsInformation`);
            button.setAttribute('aria-describedby', `${category}AriaDescription`);
            button.id = `${category}Selector`;
            button.className = `h-100 category-selector ${category}`;
            button.addEventListener('click', event => changeSelectedCategory(event, category));
            button.addEventListener('focus', () =>
              document
                .getElementById(`${category}Description`)
                .dispatchEvent(new MouseEvent('mouseover')),
            );
            button.addEventListener('blur', () =>
              document
                .getElementById(`${category}Description`)
                .dispatchEvent(new MouseEvent('mouseout')),
            );
            button.addEventListener('mousedown', event => event.preventDefault());

            const divFlex = document.createElement('div');
            divFlex.className = 'd-flex align-items-center mb-3';

            const spanTitle = document.createElement('span');
            spanTitle.id = `${category}Title`;
            spanTitle.className = 'd-flex align-items-center category-name fw-bold d-inline mb-0';
            spanTitle.textContent = formattedCategoryTitles[category];

            const svgIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svgIcon.setAttribute('tabindex', '-1');
            svgIcon.id = `${category}Description`;
            svgIcon.setAttribute('class', 'ms-2');
            svgIcon.setAttribute('data-bs-toggle', 'tooltip');
            svgIcon.setAttribute('data-bs-placement', 'top');
            svgIcon.setAttribute('title', categoryData.description);
            svgIcon.setAttribute('width', '14');
            svgIcon.setAttribute('height', '14');
            svgIcon.setAttribute('viewBox', '0 0 14 14');
            svgIcon.setAttribute('fill', 'none');

            const clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
            clipPath.className = 'clip0_1630_1670';

            const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('width', '14');
            rect.setAttribute('height', '14');
            rect.setAttribute('fill', 'white');

            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute(
              'd',
              'M11.9528 2.05329C9.22079 -0.68205 4.78867 -0.68477 2.0533 2.04718C-0.682042 4.7792 -0.684795 9.21135 2.04722 11.9467C4.77917 14.6821 9.21135 14.6848 11.9467 11.9528C14.682 9.22085 14.6848 4.78863 11.9528 2.05329ZM7.00216 11.2406C6.6319 11.2406 6.33174 10.9405 6.33174 10.5702C6.33174 10.1999 6.63187 9.89976 7.00216 9.89976C7.37243 9.89976 7.67259 10.1999 7.67259 10.5702C7.67255 10.9405 7.37243 11.2406 7.00216 11.2406ZM8.09214 7.20401C7.70918 7.42788 7.67645 7.7033 7.6748 8.49691C7.6747 8.54938 7.67453 8.60233 7.67423 8.65558C7.67185 9.03068 7.36712 9.33312 6.99253 9.33312C6.99105 9.33312 6.98957 9.33312 6.98813 9.33312C6.61159 9.33074 6.3083 9.02356 6.31066 8.64699C6.31099 8.59568 6.31109 8.54468 6.31119 8.49415C6.31287 7.67852 6.31492 6.66352 7.40395 6.02694C8.27777 5.51613 8.3879 5.18059 8.28543 4.74029C8.16503 4.2231 7.69273 4.08907 7.32418 4.1312C7.20042 4.14541 6.58322 4.24724 6.58322 4.85783C6.58322 5.23431 6.27795 5.5396 5.90141 5.5396C5.52487 5.5396 5.21964 5.23431 5.21964 4.85783C5.21964 3.76416 6.02107 2.90831 7.16859 2.77656C8.35043 2.64099 9.35515 3.32135 9.61338 4.4312C9.99939 6.08915 8.61379 6.89911 8.09214 7.20401Z',
            );
            path.setAttribute('fill', '#c9c8c6');

            clipPath.appendChild(rect);
            svgIcon.appendChild(clipPath);
            svgIcon.appendChild(path);

            divFlex.appendChild(spanTitle);
            divFlex.appendChild(svgIcon);

            const spanInfo = document.createElement('span');
            spanInfo.id = `${category}ItemsInformation`;
            spanInfo.className = 'category-information';

            if (categoryData.totalItems !== 0) {
              spanInfo.textContent = `${categoryData.rules.length} ${categoryData.rules.length === 1 ? 'issue' : 'issues'} / ${categoryData.totalItems} ${categoryData.totalItems === 1 ? 'occurrence' : 'occurrences'}`;
            } else if (categoryData.totalItems === 0) {
              spanInfo.textContent = `0 issues`;
            }

            button.appendChild(divFlex);
            button.appendChild(spanInfo);
            listItem.appendChild(button);
            scategoryList.appendChild(listItem);
          }
        });

        const categoryList = document.getElementById('issueTypeListbox');

        Object.keys(scanItems).forEach(category => {
          if (["mustFix", "goodToFix", "needsReview"].includes(category)) { // skip other keys like pagesScanned, etc

            const categoryData = scanItems[category];
            const rulesLength = categoryData.rules ? categoryData.rules.length : 0;

            const listItem = document.createElement('li');
            listItem.tabIndex = -1;
            listItem.id = `${category}DropdownSelector`;
            listItem.className = `${category} category-selector d-flex flex-row align-items-center gap-2 position-relative`;
            listItem.role = 'option';

            const spanTitle = document.createElement('span');
            spanTitle.id = `${category}Title`;
            spanTitle.className = 'd-flex align-items-center category-name fw-bold d-inline mb-0';
            spanTitle.textContent = formattedCategoryTitles[category];

            const spanInfo = document.createElement('span');
            spanInfo.id = `${category}ItemsInformation`;
            spanInfo.className = 'category-information';

            if (categoryData.totalItems !== 0) {
              spanInfo.textContent = `(${categoryData.rules.length} ${categoryData.rules.length === 1 ? 'issue' : 'issues'})`;
            } else if (categoryData.totalItems === 0) {
              spanInfo.textContent = `(0 issues)`;
            }

            listItem.appendChild(spanTitle);
            listItem.appendChild(spanInfo);
            categoryList.appendChild(listItem);
          }
        });
      };

      const scanDataHTML = () => {
        const formattedViewerLocalStartTime = formatAboutStartTime(scanData.startTime);
        document.getElementById('aboutStartTime').innerHTML = formattedViewerLocalStartTime;
        document.getElementById('urlScanned').innerHTML = scanData.urlScanned;
        document.getElementById('urlScanned').href = scanData.urlScanned;
        document.getElementById('viewport').innerHTML = scanData.viewport.startsWith('CustomWidth')
          ? `${scanData.viewport.split('_')[1]} width viewport`
          : scanData.viewport + ' viewport';
        document.getElementById('pagesScannedModalToggleTxt').innerHTML = scanData.isCustomFlow
          ? scanData.customFlowLabel +
            ' (' +
            scanData.totalPagesScanned +
            ' ' +
            (scanData.totalPagesScanned === 1 ? 'page' : 'pages') +
            ')'
          : scanData.scanType +
            ' crawl' +
            ' (' +
            scanData.totalPagesScanned +
            ' ' +
            (scanData.totalPagesScanned === 1 ? 'page' : 'pages') +
            ')';

        var itemsElement = document.getElementById('items');
        var failedItems = scanItems.mustFix.totalItems + scanItems.goodToFix.totalItems;
        var passedItems = scanItems.passed.totalItems;
        var itemsContent = `${failedItems} ${failedItems === 1 ? 'occurrence' : 'occurrences'} failed,<br>
        <a href="#" id="createPassedItemsFile">${passedItems} ${passedItems === 1 ? 'occurrence' : 'occurrences'} passed</a>`;
        itemsElement.innerHTML = itemsContent;

        var phAppVersionElement = document.getElementById('oobeeAppVersion');
        var versionContent = 'Oobee Version ' + scanData.oobeeAppVersion;
        phAppVersionElement.innerHTML = versionContent;

        var isCustomFlow = scanData.isCustomFlow;
        var pagesScanned = scanData.pagesScanned;
        var pagesScannedList = document.getElementById('pagesScannedList');

        pagesScanned.forEach((page, index) => {
          var listItem = document.createElement('li');

          if (isCustomFlow) {
            listItem.innerHTML = `
              <div class="custom-flow-screenshot-container">
                <img 
                  src="${page.pageImagePath}" 
                  alt="Screenshot of ${page.url}"
                  class="custom-flow-screenshot"
                  onerror="this.onerror = null; this.remove();"
                >
                <div class="display-url-container">
                  <a href="${page.url}" target="_blank">${page.pageTitle.length > 0 ? page.pageTitle : page.url}</a>
                  <p>${page.url}</p>
                </div>
              </div>
            `;
          } else {
            listItem.innerHTML = `
              <a href="${page.url}" target="_blank">${page.pageTitle.length > 0 ? page.pageTitle : page.url}</a>
              <p>${page.url}</p>
            `;
          }

          pagesScannedList.appendChild(listItem);
        });

        var totalPagesNotScanned = scanData.totalPagesNotScanned;
        var pagesNotScanned = scanData.pagesNotScanned;

        var pagesNotScannedList = document.getElementById('pagesNotScannedList');

        // Only update if there are pages not scanned
        if (totalPagesNotScanned > 0) {
          document.getElementById('totalPagesScannedLabel').innerHTML = scanData.totalPagesScanned;
          document.getElementById('totalPagesNotScannedLabel').innerHTML =
            scanData.totalPagesNotScanned;

          pagesNotScanned.forEach((page, index) => {
            var listItem = document.createElement('li');
            const url = page.url || page;
            const metadata = page.metadata || page;

            const linkHTML = `<a class="not-scanned-url" href="${url}" target="_blank">${url}</a>`;
            const metadataHTML = `
              <div class="metadata-inline">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none">
                  <path d="M12 19.875C9.91142 19.875 7.90838 19.0453 6.43153 17.5685C4.95468 16.0916 4.125 14.0886 4.125 12C4.125 9.91142 4.95468 7.90838 6.43153 6.43153C7.90838 4.95468 9.91142 4.125 12 4.125C14.0886 4.125 16.0916 4.95468 17.5685 6.43153C19.0453 7.90838 19.875 9.91142 19.875 12C19.875 14.0886 19.0453 16.0916 17.5685 17.5685C16.0916 19.0453 14.0886 19.875 12 19.875ZM12 21C14.3869 21 16.6761 20.0518 18.364 18.364C20.0518 16.6761 21 14.3869 21 12C21 9.61305 20.0518 7.32387 18.364 5.63604C16.6761 3.94821 14.3869 3 12 3C9.61305 3 7.32387 3.94821 5.63604 5.63604C3.94821 7.32387 3 9.61305 3 12C3 14.3869 3.94821 16.6761 5.63604 18.364C7.32387 20.0518 9.61305 21 12 21Z" fill="#f26949"/>
                  <path d="M10.8772 15.3751C10.8772 15.2274 10.9063 15.0811 10.9628 14.9446C11.0194 14.8081 11.1022 14.6841 11.2067 14.5796C11.3112 14.4752 11.4352 14.3923 11.5717 14.3357C11.7082 14.2792 11.8545 14.2501 12.0022 14.2501C12.1499 14.2501 12.2962 14.2792 12.4327 14.3357C12.5692 14.3923 12.6932 14.4752 12.7977 14.5796C12.9022 14.6841 12.985 14.8081 13.0416 14.9446C13.0981 15.0811 13.1272 15.2274 13.1272 15.3751C13.1272 15.6735 13.0087 15.9596 12.7977 16.1706C12.5867 16.3816 12.3006 16.5001 12.0022 16.5001C11.7038 16.5001 11.4177 16.3816 11.2067 16.1706C10.9957 15.9596 10.8772 15.6735 10.8772 15.3751ZM10.9874 8.61949C10.9725 8.47756 10.9875 8.33407 11.0315 8.19832C11.0756 8.06257 11.1477 7.9376 11.2432 7.83152C11.3387 7.72544 11.4554 7.64062 11.5857 7.58256C11.7161 7.52449 11.8572 7.49449 11.9999 7.49449C12.1427 7.49449 12.2838 7.52449 12.4142 7.58256C12.5445 7.64062 12.6612 7.72544 12.7567 7.83152C12.8522 7.9376 12.9243 8.06257 12.9683 8.19832C13.0124 8.33407 13.0274 8.47756 13.0124 8.61949L12.6187 12.5649C12.6055 12.7199 12.5346 12.8642 12.42 12.9695C12.3054 13.0747 12.1555 13.133 11.9999 13.133C11.8444 13.133 11.6945 13.0747 11.5799 12.9695C11.4653 12.8642 11.3944 12.7199 11.3812 12.5649L10.9874 8.61949Z" fill="#f26949"/>
                </svg>
                <span class="metadata-text">${metadata}</span>
              </div>`;

            listItem.innerHTML = `${linkHTML}${metadataHTML}`;
            pagesNotScannedList.appendChild(listItem);
          });
        }

        const cypressScanAboutMetadata = scanData.cypressScanAboutMetadata;
        if (cypressScanAboutMetadata) {
          const metadataItems = Object.keys(cypressScanAboutMetadata);
          metadataItems.forEach(key => {
            var metadataSpan = document.getElementById('cypressScanAboutMetadata');
            if (metadataSpan) {
              const metadataTitle = document.createElement('span');
              metadataTitle.textContent =
                key[0].toUpperCase() + key.slice(1) + ': ' + cypressScanAboutMetadata[key];
            }
          });
        }

        document.getElementById('pagesScannedModalLabel').innerHTML = scanData.isCustomFlow
          ? scanData.customFlowLabel +
            ' (' +
            scanData.totalPagesScanned +
            ' ' +
            (scanData.totalPagesScanned === 1 ? 'page' : 'pages') +
            ')'
          : scanData.scanType +
            ' crawl' +
            ' (' +
            scanData.totalPagesScanned +
            ' ' +
            (scanData.totalPagesScanned === 1 ? 'page' : 'pages') +
            ')';

        scanDataWCAGList();
        scanDataTop10Card();
        scanDataCategorySelector();
        renderWcagGaugeFromScanData();
        renderNotCompliantTextIfAny();

        const createPassedItemsFile = async () => {
          const passedItemsJson = {};

          scanItems.passed.rules.forEach(r => {
            passedItemsJson[r.description] = {
              totalOccurrencesInScan: r.totalItems,
              totalPages: r.pagesAffected.length,
              pages: r.pagesAffected.map(p => ({
                pageTitle: p.pageTitle,
                url: p.url,
                totalOccurrencesInPage: p.items.length,
                occurrences: p.items,
                metadata: p.metadata,
              })),
            };
          });

          const jsonString = JSON.stringify(passedItemsJson, null, 4);

          const blob = new Blob([jsonString], { type: 'application/json' });

          const link = document.createElement('a');

          link.href = URL.createObjectURL(blob);

          storagePath = scanData.storagePath;

          link.download = `passed_items.json`;

          document.body.appendChild(link);

          link.click();

          document.body.removeChild(link);
        };

        document.getElementById('createPassedItemsFile').addEventListener('click', async e => {
          e.preventDefault();
          await createPassedItemsFile();
          console.log('click');
        });
      };

      const formatAboutStartTime = dateString => {
        const utcStartTimeDate = new Date(dateString);
        const formattedStartTime = utcStartTimeDate.toLocaleTimeString('en-GB', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour12: false,
          hour: 'numeric',
          minute: '2-digit',
          timeZoneName: 'shortGeneric',
        });

        const timezoneAbbreviation = new Intl.DateTimeFormat('en', {
          timeZoneName: 'shortOffset',
        })
          .formatToParts(utcStartTimeDate)
          .find(part => part.type === 'timeZoneName').value;

        //adding a breakline between the time and timezone so it looks neater on report
        const timeColonIndex = formattedStartTime.lastIndexOf(':');
        const timePart = formattedStartTime.slice(0, timeColonIndex + 3);
        const timeZonePart = formattedStartTime.slice(timeColonIndex + 4);
        const htmlFormattedStartTime = `${timePart}<br>${timeZonePart} ${timezoneAbbreviation}`;

        return htmlFormattedStartTime;
      };

      document.addEventListener('DOMContentLoaded', () => {
        scanDataPromise.then(() => {
          console.log("scanData loaded.");
          scanItemsPromise.then(() => {
            console.log("scanItems loaded.");
            initTooltips();
            scanDataHTML();
          }).error(e => {
            console.error("Failed to load scanItems: ", e);
          });
        }).error(e => {
          console.error("Failed to load scanData: ", e);
        });
      });

    </script>
    <!-- Checks if js runs -->
    <script>
      document.getElementById('jsOn').classList.remove('d-none');
      document.getElementById('jsOffMessage').classList.add('d-none');
    </script>
  </body>
</html>
